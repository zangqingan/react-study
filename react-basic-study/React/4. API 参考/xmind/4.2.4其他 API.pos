{"diagram":{"image":{"x":0,"width":200,"y":0,"pngdata":"iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAYAAACtWK6eAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAsUlEQVR4nO3BAQEAAACCIP+vbkhAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8GXHmAAFMgHIEAAAAAElFTkSuQmCC","height":200},"elements":{"leftChildren":[],"note":"","watermark":"","children":[{"parent":"root","lineStyle":{"lineColor":"#E1BEE7","lineWidth":"2"},"children":[{"parent":"896498dd7718","note":"","children":[],"id":"3c25c1c2ba10","title":"setState(updater,&nbsp;[callback])","icons":[{"color":"rgb(191, 30, 27)","name":"priority","index":"0","text":"&#xe67a"}]},{"parent":"896498dd7718","children":[],"id":"4be7280572a9","title":"setState()&nbsp;将对组件&nbsp;state&nbsp;的更改排入队列，并通知&nbsp;React&nbsp;需要使用更新后的&nbsp;state&nbsp;重新渲染此组件及其子组件。这是用于更新用户界面以响应事件处理器和处理服务器数据的主要方式<br><br>将&nbsp;setState()&nbsp;视为请求而不是立即更新组件的命令。为了更好的感知性能，React&nbsp;会延迟调用它，然后通过一次传递更新多个组件。React&nbsp;并不会保证&nbsp;state&nbsp;的变更会立即生效。<br><br>setState()&nbsp;并不总是立即更新组件。它会批量推迟更新。这使得在调用&nbsp;setState()&nbsp;后立即读取&nbsp;this.state&nbsp;成为了隐患。为了消除隐患，请使用&nbsp;componentDidUpdate&nbsp;或者&nbsp;setState&nbsp;的回调函数（setState(updater,&nbsp;callback)），这两种方式都可以保证在应用更新后触发。如需基于之前的&nbsp;state&nbsp;来设置当前的&nbsp;state，请阅读下述关于参数&nbsp;updater&nbsp;的内容。<br><br>除非&nbsp;shouldComponentUpdate()&nbsp;返回&nbsp;false，否则&nbsp;setState()&nbsp;将始终执行重新渲染操作。如果可变对象被使用，且无法在&nbsp;shouldComponentUpdate()&nbsp;中实现条件渲染，那么仅在新旧状态不一时调用&nbsp;setState()可以避免不必要的重新渲染<br>","icons":[{"color":"rgb(99, 171, 247)","name":"priority","index":"1","text":"&#xe625"}]},{"parent":"896498dd7718","lineStyle":{"lineColor":"#555","lineWidth":1},"children":[{"parent":"d7a2018a01ad","children":[],"id":"3661f7c0723d","title":"(state,&nbsp;props)&nbsp;=&gt;&nbsp;stateChange"},{"parent":"d7a2018a01ad","children":[],"id":"f4832533881c","title":"state&nbsp;是对应用变化时组件状态的引用。当然，它不应直接被修改。你应该使用基于&nbsp;state&nbsp;和&nbsp;props&nbsp;构建的新对象来表示变化"},{"parent":"d7a2018a01ad","children":[],"id":"e4199237e224","title":"updater&nbsp;函数中接收的&nbsp;state&nbsp;和&nbsp;props&nbsp;都保证为最新。updater&nbsp;的返回值会与&nbsp;state&nbsp;进行浅合并"}],"style":{"lineStype":{"lineColor":"#555","lineWidth":1},"padding":"2px 8px 2px 8px","color":"#666","lineStyle":{"lineColor":"#555","lineWidth":1},"textAlign":"left","font-weight":"normal","font-size":"13px","font-family":"微软雅黑","font-style":"normal"},"id":"d7a2018a01ad","title":"参数一为带有形式参数的&nbsp;updater&nbsp;函数","icons":[{"color":"rgb(113, 203, 45)","name":"priority","index":"2","text":"&#xe62a"}]},{"parent":"896498dd7718","children":[],"id":"0e4e1cbc9688","title":"setState()&nbsp;的第二个参数为可选的回调函数，它将在&nbsp;setState&nbsp;完成合并并重新渲染组件后执行。通常，我们建议使用&nbsp;componentDidUpdate()&nbsp;来代替此方式<br><br>","icons":[{"color":"rgb(255, 159, 26)","name":"priority","index":"3","text":"&#xe635"}]},{"parent":"896498dd7718","children":[{"parent":"568eb224a079","children":[],"id":"98ed5b2f7cdd","title":"setState(stateChange[,&nbsp;callback])"},{"parent":"568eb224a079","children":[],"id":"cd9543fb558f","title":"stateChange&nbsp;会将传入的对象浅层合并到新的&nbsp;state&nbsp;中"}],"id":"568eb224a079","title":"setState()&nbsp;的第一个参数除了接受函数外，还可以接受对象类型"}],"style":{"padding":"8px 10px 8px 10px","backgroundColor":"#2196F3","color":"#212121","textAlign":"left","font-weight":"bold","font-size":13,"font-style":"normal","border-radius":"5px","background-color":"#E1BEE7","lineStype":{"lineColor":"#E1BEE7","lineWidth":"2"},"box-shadow":"1px 2px 6px #aaa","lineStyle":{"lineColor":"#E1BEE7","lineWidth":"2"},"font-family":"微软雅黑","border-width":0,"border-style":"solid"},"id":"896498dd7718","title":"setState()<br>"},{"parent":"root","lineStyle":{"lineColor":"#FFCDD2","lineWidth":"2"},"children":[{"parent":"5bf8fe5c3c71","note":"","children":[],"id":"4b0af9a73e1a","title":"component.forceUpdate(callback)","icons":[{"color":"rgb(191, 30, 27)","name":"priority","index":"0","text":"&#xe67a"}]},{"parent":"5bf8fe5c3c71","children":[],"id":"b327245658d2","title":"默认情况下，当组件的&nbsp;state&nbsp;或&nbsp;props&nbsp;发生变化时，组件将重新渲染。如果&nbsp;render()&nbsp;方法依赖于其他数据，则可以调用&nbsp;forceUpdate()&nbsp;强制让组件重新渲染<br>","icons":[{"color":"rgb(99, 171, 247)","name":"priority","index":"1","text":"&#xe625"}]},{"parent":"5bf8fe5c3c71","lineStyle":{"lineColor":"#555","lineWidth":1},"children":[],"style":{"lineStype":{"lineColor":"#555","lineWidth":1},"padding":"2px 8px 2px 8px","color":"#666","lineStyle":{"lineColor":"#555","lineWidth":1},"textAlign":"left","font-weight":"normal","font-size":"13px","font-family":"微软雅黑","font-style":"normal"},"id":"19ebcaef8a05","title":"调用&nbsp;forceUpdate()&nbsp;将致使组件调用&nbsp;render()&nbsp;方法，此操作会跳过该组件的&nbsp;shouldComponentUpdate()。但其子组件会触发正常的生命周期方法，包括&nbsp;shouldComponentUpdate()&nbsp;方法。如果标记发生变化，React&nbsp;仍将只更新&nbsp;DOM","icons":[{"color":"rgb(113, 203, 45)","name":"priority","index":"2","text":"&#xe62a"}]},{"parent":"5bf8fe5c3c71","children":[],"id":"10c2d21c2e0f","title":"通常你应该避免使用&nbsp;forceUpdate()，尽量在&nbsp;render()&nbsp;中使用&nbsp;this.props&nbsp;和&nbsp;this.state","icons":[{"color":"rgb(255, 159, 26)","name":"priority","index":"3","text":"&#xe635"}]}],"style":{"padding":"8px 10px 8px 10px","backgroundColor":"#2196F3","color":"#212121","textAlign":"left","font-weight":"bold","font-size":13,"border-color":"rgb(255, 255, 255)","font-style":"normal","border-radius":"5px","background-color":"#FFCDD2","lineStype":{"lineColor":"#FFCDD2","randomLineColor":"rgb(153,204,255)","lineWidth":"2"},"box-shadow":"1px 2px 6px #aaa","lineStyle":{"lineColor":"#FFCDD2","randomLineColor":"rgb(153,204,255)","lineWidth":"2"},"font-family":"微软雅黑","border-width":"0px","border-style":"none"},"id":"5bf8fe5c3c71","title":"forceUpdate()<br>"}],"root":true,"theme":"customise_7fd055efa78b","style":{"background-color":"#2196F3","border-radius":"6px","color":"rgb(255, 255, 255)","font-weight":"bold","border-color":"rgb(255, 255, 255)","border-width":"0px","border-style":"none"},"id":"root","title":"其他&nbsp;API","icons":[{"color":"rgb(255, 255, 255)","name":"","index":"46"}],"structure":"mind_free"}},"meta":{"exportTime":"2022-04-09 12:16:54","member":"60cca488e0b34d55bbf2954f","diagramInfo":{"creator":"60cca488e0b34d55bbf2954f","created":"2022-04-09 12:09:17","modified":"2022-04-09 12:16:29","title":"4.2.4其他 API","category":"mind_free"},"id":"625106ed0e3e74116833b280","type":"ProcessOn Schema File","version":"1.0"}}