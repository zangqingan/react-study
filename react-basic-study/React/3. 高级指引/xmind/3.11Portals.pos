{"diagram":{"image":{"x":0,"width":200,"y":0,"pngdata":"iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAYAAACtWK6eAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAsUlEQVR4nO3BAQEAAACCIP+vbkhAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8GXHmAAFMgHIEAAAAAElFTkSuQmCC","height":200},"elements":{"leftChildren":[],"note":"","margin":{"childMarginW":10,"childMarginH":5,"marginW":20,"marginH":10},"watermark":"","children":[{"parent":"root","lineStyle":{"randomLineColor":"rgb(255,204,204)","lineColor":"#7B1FA2"},"children":[{"parent":"812b3a9306dd","note":"","children":[],"style":{"font-weight":"normal"},"id":"ac25a09c6779","title":"Portal&nbsp;提供了一种将子节点渲染到存在于父组件以外的&nbsp;DOM&nbsp;节点的优秀的方案","icons":[{"color":"rgb(191, 30, 27)","name":"priority","index":"0","text":"&#xe67a"}]},{"parent":"812b3a9306dd","note":"","children":[],"style":{"font-weight":"normal"},"id":"4d70d73dad33","title":"语法：ReactDOM.createPortal(child,&nbsp;container)","icons":[{"color":"rgb(99, 171, 247)","name":"priority","index":"1","text":"&#xe625"}]},{"parent":"812b3a9306dd","children":[{"parent":"3ce2e9e4fcdf","children":[],"id":"469a9ec8704f","title":"第一个参数（child）是任何可渲染的&nbsp;React&nbsp;子元素，例如一个元素，字符串或&nbsp;fragment"},{"parent":"3ce2e9e4fcdf","children":[],"id":"640d500c6bdd","title":"第二个参数（container）是一个&nbsp;DOM&nbsp;元素"}],"style":{"font-weight":"normal"},"id":"3ce2e9e4fcdf","title":"参数说明","icons":[{"color":"rgb(113, 203, 45)","name":"priority","index":"2","text":"&#xe62a"}]}],"style":{"background-color":"#7B1FA2","border-radius":"5px","color":"rgb(255, 255, 255)","font-weight":"bold","font-size":13,"border-color":"rgb(255, 255, 255)","border-width":"0px","border-style":"none"},"id":"812b3a9306dd","title":"简介"},{"parent":"root","lineStyle":{"lineColor":"#1976D2"},"children":[{"parent":"3b7f7da9d693","lineStyle":{"lineColor":"#555","lineWidth":1},"children":[{"parent":"3da828dbd224","note":"render() {\n  // React 挂载了一个新的 div，并且把子元素渲染其中\n  return (\n    &lt;div&gt;\n      {this.props.children}\n    &lt;/div&gt;\n  );\n}","children":[],"id":"1294ce937bdc","title":"例"}],"style":{"lineStype":{"lineType":"curve","lineColor":"#555","lineWidth":1},"padding":"2px 8px 2px 8px","color":"#666","lineStyle":{"lineColor":"#555","lineWidth":1},"textAlign":"left","font-weight":"normal","font-size":"13px","font-family":"微软雅黑","bold":false,"font-style":"normal","italic":false},"id":"3da828dbd224","title":"通常来讲，当你从组件的&nbsp;render&nbsp;方法返回一个元素时，该元素将被挂载到&nbsp;DOM&nbsp;节点中离其最近的父节点","icons":[{"color":"rgb(99, 171, 247)","name":"priority","index":"0","text":"&#xe67a"}]},{"parent":"3b7f7da9d693","lineStyle":{"lineColor":"#555","lineWidth":1},"children":[{"parent":"4d0baeac4530","children":[],"style":{"background-color":"#F5F5F5","font-size":12},"id":"b116ecfe629f","title":"render()&nbsp;{\n&nbsp;&nbsp;//&nbsp;React&nbsp;并*没有*创建一个新的&nbsp;div。它只是把子元素渲染到&nbsp;`domNode`&nbsp;中。\n&nbsp;&nbsp;//&nbsp;`domNode`&nbsp;是一个可以在任何位置的有效&nbsp;DOM&nbsp;节点。\n&nbsp;&nbsp;return&nbsp;ReactDOM.createPortal(\n&nbsp;&nbsp;&nbsp;&nbsp;this.props.children,\n&nbsp;&nbsp;&nbsp;&nbsp;domNode\n&nbsp;&nbsp;);\n}"}],"boundaries":[{"boundary":true,"parent":"4d0baeac4530","boundRank":1,"children":[],"pos":{"miny":9770,"minx":10613,"maxY":9938,"maxX":11105},"range":"0,0","style":{"lineType":"1","dasharray":"6,3","lineColor":"#63abf7","opacity":"0.1","fill":"#63abf7","lineWidth":"1"},"id":"aed184d4dc1e","title":"外框"}],"style":{"lineStype":{"lineType":"curve","lineColor":"#555","lineWidth":1},"padding":"2px 8px 2px 8px","color":"#666","lineStyle":{"lineColor":"#555","lineWidth":1},"textAlign":"left","font-weight":"normal","font-size":"13px","font-family":"微软雅黑","bold":false,"font-style":"normal","italic":false},"id":"4d0baeac4530","title":"然而，有时候将子元素插入到&nbsp;<br>DOM&nbsp;节点中的不同位置也是有好处的","icons":[{"color":"rgb(113, 203, 45)","name":"priority","index":"1","text":"&#xe625"}]},{"parent":"3b7f7da9d693","lineStyle":{"lineColor":"#555","lineWidth":1},"children":[],"style":{"lineStype":{"lineType":"curve","lineColor":"#555","lineWidth":1},"padding":"2px 8px 2px 8px","color":"#666","lineStyle":{"lineColor":"#555","lineWidth":1},"textAlign":"left","font-weight":"normal","font-size":"13px","font-family":"微软雅黑","bold":false,"font-style":"normal","italic":false},"id":"6c79dfddc125","title":"一个&nbsp;portal&nbsp;的典型用例是当父组件有overflow:&nbsp;hidden或z-index样式时，但你需要子组件能够在视觉上“跳出”其容器。例如，对话框、悬浮卡以及提示框","icons":[{"color":"rgb(255, 159, 26)","name":"priority","index":"2","text":"&#xe62a"}]}],"boundaries":[],"style":{"background-color":"#1976D2","border-radius":"5px","font-weight":"bold","font-size":13},"id":"3b7f7da9d693","title":"用法"},{"parent":"root","lineStyle":{"randomLineColor":"rgb(153,204,255)","lineColor":"#F57F17"},"children":[{"parent":"b653f7534587","lineStyle":{"lineColor":"#555","lineWidth":1},"children":[],"style":{"lineStype":{"lineType":"curve","lineColor":"#555","lineWidth":1},"padding":"2px 8px 2px 8px","color":"#666","lineStyle":{"lineColor":"#555","lineWidth":1},"textAlign":"left","font-weight":"normal","font-size":"13px","font-family":"微软雅黑","bold":false,"font-style":"normal","italic":false},"id":"09c359863911","title":"尽管&nbsp;portal&nbsp;可以被放置在&nbsp;DOM&nbsp;树中的任何地方，但在任何其他方面，其行为和普通的&nbsp;React&nbsp;子节点行为一致。由于&nbsp;portal&nbsp;仍存在于&nbsp;React&nbsp;树，&nbsp;且与&nbsp;DOM&nbsp;树&nbsp;中的位置无关，那么无论其子节点是否是&nbsp;portal，像&nbsp;context&nbsp;这样的功能特性都是不变的。<br>这包含事件冒泡。一个从&nbsp;portal&nbsp;内部触发的事件会一直冒泡至包含&nbsp;React&nbsp;树的祖先，即便这些元素并不是&nbsp;DOM&nbsp;树&nbsp;中的祖先","icons":[{"color":"rgb(99, 171, 247)","name":"priority","index":"0","text":"&#xe67a"}]},{"parent":"b653f7534587","lineStyle":{"lineColor":"#555","lineWidth":1},"children":[{"parent":"a055a844090f","children":[{"parent":"0deb39e1a0ed","children":[],"style":{"background-color":"#F5F5F5","font-size":12},"id":"8f9dbbd60c48","title":"&lt;html&gt;\n&nbsp;&nbsp;&lt;body&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;id=\"app-root\"&gt;&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;id=\"modal-root\"&gt;&lt;/div&gt;\n&nbsp;&nbsp;&lt;/body&gt;\n&lt;/html&gt;"}],"boundaries":[{"boundary":true,"parent":"0deb39e1a0ed","boundRank":1,"children":[],"range":"0,0","style":{"lineType":"1","dasharray":"6,3","lineColor":"#63abf7","fill":"#63abf7","opacity":"0.1","lineWidth":"1"},"id":"fe47754792d2","title":"外框"}],"id":"0deb39e1a0ed","title":"假设存在如下&nbsp;HTML&nbsp;结构："}],"style":{"lineStype":{"lineType":"curve","lineColor":"#555","lineWidth":1},"padding":"2px 8px 2px 8px","color":"#666","lineStyle":{"lineColor":"#555","lineWidth":1},"textAlign":"left","font-weight":"normal","font-size":"13px","font-family":"微软雅黑","bold":false,"font-style":"normal","italic":false},"id":"a055a844090f","title":"例子","icons":[{"color":"rgb(113, 203, 45)","name":"priority","index":"1","text":"&#xe625"}]},{"parent":"b653f7534587","lineStyle":{"lineColor":"#555","lineWidth":1},"children":[{"parent":"0dfdea6aa31e","note":"// 在 DOM 中有两个容器是兄弟级 （siblings）\nconst appRoot = document.getElementById(&#39;app-root&#39;);\nconst modalRoot = document.getElementById(&#39;modal-root&#39;);\n\nclass Modal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.el = document.createElement(&#39;div&#39;);\n  }\n\n  componentDidMount() {\n    // 在 Modal 的所有子元素被挂载后，\n    // 这个 portal 元素会被嵌入到 DOM 树中，\n    // 这意味着子元素将被挂载到一个分离的 DOM 节点中。\n    // 如果要求子组件在挂载时可以立刻接入 DOM 树，\n    // 例如衡量一个 DOM 节点，\n    // 或者在后代节点中使用 ‘autoFocus’，\n    // 则需添加 state 到 Modal 中，\n    // 仅当 Modal 被插入 DOM 树中才能渲染子元素。\n    modalRoot.appendChild(this.el);\n  }\n\n  componentWillUnmount() {\n    modalRoot.removeChild(this.el);\n  }\n\n  render() {\n    return ReactDOM.createPortal(\n      this.props.children,\n      this.el\n    );\n  }\n}\n\nclass Parent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {clicks: 0};\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    // 当子元素里的按钮被点击时，\n    // 这个将会被触发更新父元素的 state，\n    // 即使这个按钮在 DOM 中不是直接关联的后代\n    this.setState(state =&gt; ({\n      clicks: state.clicks + 1\n    }));\n  }\n\n  render() {\n    return (\n      &lt;div onClick={this.handleClick}&gt;\n        &lt;p&gt;Number of clicks: {this.state.clicks}&lt;/p&gt;\n        &lt;p&gt;\n          Open up the browser DevTools\n          to observe that the button\n          is not a child of the div\n          with the onClick handler.\n        &lt;/p&gt;\n        &lt;Modal&gt;\n          &lt;Child /&gt;\n        &lt;/Modal&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n\nfunction Child() {\n  // 这个按钮的点击事件会冒泡到父元素\n  // 因为这里没有定义 &#39;onClick&#39; 属性\n  return (\n    &lt;div className=&quot;modal&quot;&gt;\n      &lt;button&gt;Click&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\nReactDOM.render(&lt;Parent /&gt;, appRoot);","children":[],"id":"d35e27532d47","title":"代码"}],"style":{"lineStype":{"lineType":"curve","lineColor":"#555","lineWidth":1},"padding":"2px 8px 2px 8px","color":"#666","lineStyle":{"lineColor":"#555","lineWidth":1},"textAlign":"left","font-weight":"normal","font-size":"13px","font-family":"微软雅黑","bold":false,"font-style":"normal","italic":false},"id":"0dfdea6aa31e","title":"在&nbsp;#app-root&nbsp;里的&nbsp;Parent&nbsp;组件能够捕获到未被捕获的从兄弟节点&nbsp;#modal-root&nbsp;冒泡上来的事件","icons":[{"color":"rgb(255, 159, 26)","name":"priority","index":"2","text":"&#xe62a"}]},{"parent":"b653f7534587","lineStyle":{"lineColor":"#555","lineWidth":1},"children":[],"style":{"lineStype":{"lineType":"curve","lineColor":"#555","lineWidth":1},"padding":"2px 8px 2px 8px","color":"#666","lineStyle":{"lineColor":"#555","lineWidth":1},"textAlign":"left","font-weight":"normal","font-size":"13px","font-family":"微软雅黑","bold":false,"font-style":"normal","italic":false},"id":"b85aeefbb127","title":"在父组件里捕获一个来自&nbsp;portal&nbsp;冒泡上来的事件，使之能够在开发时具有不完全依赖于&nbsp;portal&nbsp;的更为灵活的抽象。例如，如果你在渲染一个&nbsp;&lt;Modal&nbsp;/&gt;&nbsp;组件，无论其是否采用&nbsp;portal&nbsp;实现，父组件都能够捕获其事件<br>","icons":[{"color":"rgb(48, 191, 191)","name":"priority","index":"3","text":"&#xe635"}]}],"style":{"background-color":"#F57F17","border-radius":"5px","color":"rgb(255, 255, 255)","font-weight":"bold","font-size":13,"border-color":"rgb(255, 255, 255)","border-width":"0px","border-style":"none"},"id":"b653f7534587","title":"通过&nbsp;Portal&nbsp;进行事件冒泡"}],"root":true,"theme":"customise_7fd055efa78b","style":{"background-color":"rgb(255, 83, 92)","border-radius":"6px","color":"rgb(255, 255, 255)","font-weight":"bold","border-color":"rgb(255, 255, 255)","border-width":"0px","border-style":"none"},"id":"root","title":"Portals","icons":[{"color":"rgb(255, 255, 255)","name":"","index":"53","text":"&#xe693"}],"structure":"mind_free"}},"meta":{"exportTime":"2022-04-08 09:18:20","member":"60cca488e0b34d55bbf2954f","diagramInfo":{"creator":"60cca488e0b34d55bbf2954f","created":"2022-04-08 09:10:32","modified":"2022-04-08 09:18:07","title":"3.11Portals","category":"mind_free"},"id":"624f8b881e085332f332431b","type":"ProcessOn Schema File","version":"1.0"}}