{"diagram":{"image":{"x":0,"width":200,"y":0,"pngdata":"iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAYAAACtWK6eAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAsUlEQVR4nO3BAQEAAACCIP+vbkhAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8GXHmAAFMgHIEAAAAAElFTkSuQmCC","height":200},"elements":{"leftChildren":[],"note":"","watermark":"","children":[{"parent":"root","lineStyle":{"lineColor":"#BBDEFB"},"children":[{"parent":"812b3a9306dd","note":"","children":[],"id":"ac25a09c6779","title":"大多数&nbsp;React&nbsp;应用都会使用&nbsp;Webpack，Rollup&nbsp;或&nbsp;Browserify&nbsp;这类的构建工具来打包文件。&nbsp;<br>打包是一个将文件引入并合并到一个单独文件的过程，最终形成一个&nbsp;“bundle”。&nbsp;接着在页面上引入该&nbsp;bundle，整个应用即可一次性加载","icons":[{"color":"rgb(191, 30, 27)","name":"priority","index":"0","text":"&#xe67a"}]},{"parent":"812b3a9306dd","children":[],"id":"4d70d73dad33","title":"如果你正在使用&nbsp;Create&nbsp;React&nbsp;App，Next.js，Gatsby，或者类似的工具，你会拥有一个可以直接使用的&nbsp;Webpack&nbsp;配置来进行打包工作<br>如果你没有使用这类工具，你就需要自己来进行配置<br>","icons":[{"color":"rgb(99, 171, 247)","name":"priority","index":"1","text":"&#xe625"}]}],"style":{"background-color":"#BBDEFB","border-radius":"5px","color":"#4A148C","font-weight":"bold","font-size":13,"border-color":"rgb(255, 255, 255)","border-width":"0px","border-style":"none"},"id":"812b3a9306dd","title":"打包<br>"},{"parent":"root","lineStyle":{"lineColor":"#E1BEE7","lineWidth":"2"},"children":[{"parent":"896498dd7718","note":"","children":[],"id":"3c25c1c2ba10","title":"打包是个非常棒的技术，但随着你的应用增长，你的代码包也将随之增长。<br>尤其是在整合了体积巨大的第三方库的情况下。你需要关注你代码包中所包含的代码，以避免因体积过大而导致加载时间过长","icons":[{"color":"rgb(191, 30, 27)","name":"priority","index":"0","text":"&#xe67a"}]},{"parent":"896498dd7718","children":[],"id":"4be7280572a9","title":"为了避免搞出大体积的代码包，在前期就思考该问题并对代码包进行分割是个不错的选择。&nbsp;代码分割是由诸如&nbsp;Webpack，Rollup&nbsp;和&nbsp;Browserify（factor-bundle）这类打包器支持的一项技术，能够创建多个包并在运行时动态加载<br>","icons":[{"color":"rgb(99, 171, 247)","name":"priority","index":"1","text":"&#xe625"}]},{"parent":"896498dd7718","lineStyle":{"lineColor":"#555","lineWidth":1},"children":[],"style":{"lineStype":{"lineType":"roundBroken","lineColor":"#555","lineWidth":1},"padding":"2px 8px 2px 8px","color":"#666","lineStyle":{"lineColor":"#555","lineWidth":1},"textAlign":"left","font-weight":"normal","font-size":"13px","font-family":"微软雅黑","bold":false,"font-style":"normal","italic":false},"id":"d7a2018a01ad","title":"对你的应用进行代码分割能够帮助你“懒加载”当前用户所需要的内容，能够显著地提高你的应用性能。尽管并没有减少应用整体的代码体积，但你可以避免加载用户永远不需要的代码，并在初始加载的时候减少所需加载的代码量","icons":[{"color":"rgb(113, 203, 45)","name":"priority","index":"2","text":"&#xe62a"}]}],"style":{"padding":"8px 10px 8px 10px","backgroundColor":"#2196F3","color":"#4A148C","textAlign":"left","font-weight":"bold","font-size":13,"font-style":"normal","border-radius":"5px","background-color":"#E1BEE7","lineStype":{"lineColor":"#E1BEE7","lineWidth":"2"},"box-shadow":"1px 2px 6px #aaa","lineStyle":{"lineColor":"#E1BEE7","lineWidth":"2"},"font-family":"微软雅黑","border-width":0,"border-style":"solid"},"id":"896498dd7718","title":"代码分割<br>"},{"parent":"root","lineStyle":{"lineColor":"#FFCDD2","lineWidth":"2"},"children":[{"parent":"5bf8fe5c3c71","note":"","children":[{"parent":"4b0af9a73e1a","note":"使用之前：\n\nimport { add } from &#39;./math&#39;;\n\nconsole.log(add(16, 26));\n\n使用之后：\n\nimport(&quot;./math&quot;).then(math =&gt; {\n  console.log(math.add(16, 26));\n});","children":[],"id":"d820660e80f0","title":"例子"}],"id":"4b0af9a73e1a","title":"在你的应用中引入代码分割的最佳方式是通过动态&nbsp;import()&nbsp;语法","icons":[{"color":"rgb(191, 30, 27)","name":"priority","index":"0","text":"&#xe67a"}]},{"parent":"5bf8fe5c3c71","children":[],"id":"b327245658d2","title":"当&nbsp;Webpack&nbsp;解析到该语法时，会自动进行代码分割。如果你使用&nbsp;Create&nbsp;React&nbsp;App，该功能已开箱即用，你可以立刻使用该特性。Next.js&nbsp;也已支持该特性而无需进行配置。<br>","icons":[{"color":"rgb(99, 171, 247)","name":"priority","index":"1","text":"&#xe625"}]},{"parent":"5bf8fe5c3c71","lineStyle":{"lineColor":"#555","lineWidth":1},"children":[],"style":{"lineStype":{"lineType":"roundBroken","lineColor":"#555","lineWidth":1},"padding":"2px 8px 2px 8px","color":"#666","lineStyle":{"lineColor":"#555","lineWidth":1},"textAlign":"left","font-weight":"normal","font-size":"13px","font-family":"微软雅黑","bold":false,"font-style":"normal","italic":false},"id":"19ebcaef8a05","title":"如果你自己配置&nbsp;Webpack，你可能要阅读下&nbsp;Webpack&nbsp;关于代码分割的指南。你的&nbsp;Webpack&nbsp;配置应该类似于此","icons":[{"color":"rgb(113, 203, 45)","name":"priority","index":"2","text":"&#xe62a"}]},{"parent":"5bf8fe5c3c71","children":[],"id":"10c2d21c2e0f","title":"当使用&nbsp;Babel&nbsp;时，你要确保&nbsp;Babel&nbsp;能够解析动态&nbsp;import&nbsp;语法而不是将其进行转换。对于这一要求你需要&nbsp;babel-plugin-syntax-dynamic-import&nbsp;插件","icons":[{"color":"rgb(255, 159, 26)","name":"priority","index":"3","text":"&#xe635"}]}],"style":{"padding":"8px 10px 8px 10px","backgroundColor":"#2196F3","color":"#4A148C","textAlign":"left","font-weight":"bold","font-size":13,"border-color":"rgb(255, 255, 255)","font-style":"normal","border-radius":"5px","background-color":"#FFCDD2","lineStype":{"lineColor":"#FFCDD2","randomLineColor":"rgb(153,204,255)","lineWidth":"2"},"box-shadow":"1px 2px 6px #aaa","lineStyle":{"lineColor":"#FFCDD2","randomLineColor":"rgb(153,204,255)","lineWidth":"2"},"font-family":"微软雅黑","border-width":"0px","border-style":"none"},"id":"5bf8fe5c3c71","title":"import()<br>"},{"parent":"root","lineStyle":{"lineColor":"#C8E6C9","lineWidth":"2"},"children":[{"parent":"a01eafed5bb9","note":"","children":[{"parent":"15028f67c0e5","note":"使用之前：\n\nimport OtherComponent from &#39;./OtherComponent&#39;;\n使用之后：\n\nconst OtherComponent = React.lazy(() =&gt; import(&#39;./OtherComponent&#39;));\n此代码将会在组件首次渲染时，自动导入包含 OtherComponent 组件的包。","children":[],"id":"bc92fd4270af","title":"例子"}],"id":"15028f67c0e5","title":"React.lazy&nbsp;函数能让你像渲染常规组件一样处理动态引入（的组件）","icons":[{"color":"rgb(191, 30, 27)","name":"priority","index":"0","text":"&#xe67a"}]},{"parent":"a01eafed5bb9","lineStyle":{"lineColor":"#555","lineWidth":1},"children":[],"style":{"lineStype":{"lineType":"roundBroken","lineColor":"#555","lineWidth":1},"padding":"2px 8px 2px 8px","color":"#E57373","lineStyle":{"lineColor":"#555","lineWidth":1},"textAlign":"left","font-weight":"normal","font-size":"13px","font-family":"微软雅黑","bold":false,"font-style":"normal","italic":false},"id":"412c765359ca","title":"React.lazy&nbsp;接受一个函数，这个函数需要动态调用&nbsp;import()。它必须返回一个&nbsp;Promise，该&nbsp;Promise&nbsp;需要&nbsp;resolve&nbsp;一个&nbsp;defalut&nbsp;export&nbsp;的&nbsp;React&nbsp;组件<br>","icons":[{"color":"rgb(99, 171, 247)","name":"priority","index":"1","text":"&#xe625"}]},{"parent":"a01eafed5bb9","note":"import React, { Suspense } from &#39;react&#39;;\n\nconst OtherComponent = React.lazy(() =&gt; import(&#39;./OtherComponent&#39;));\n\nfunction MyComponent() {\n  return (\n    &lt;div&gt;\n      &lt;Suspense fallback={&lt;div&gt;Loading...&lt;/div&gt;}&gt;\n        &lt;OtherComponent /&gt;\n      &lt;/Suspense&gt;\n    &lt;/div&gt;\n  );\n}","lineStyle":{"lineColor":"#555","lineWidth":1},"children":[],"style":{"lineStype":{"lineType":"roundBroken","lineColor":"#555","lineWidth":1},"padding":"2px 8px 2px 8px","color":"#666","lineStyle":{"lineColor":"#555","lineWidth":1},"textAlign":"left","font-weight":"normal","font-size":"13px","font-family":"微软雅黑","bold":false,"font-style":"normal","italic":false},"id":"793c480c9601","title":"然后应在&nbsp;Suspense&nbsp;组件中渲染&nbsp;lazy&nbsp;组件，如此使得我们可以使用在等待加载&nbsp;lazy&nbsp;组件时做优雅降级","icons":[{"color":"rgb(113, 203, 45)","name":"priority","index":"2","text":"&#xe62a"}]},{"parent":"a01eafed5bb9","children":[],"id":"d39b88848e99","title":"Suspense的fallback&nbsp;属性接受任何在组件加载过程中你想展示的&nbsp;React&nbsp;元素。你可以将&nbsp;Suspense&nbsp;组件置于懒加载组件之上的任何位置。你甚至可以用一个&nbsp;Suspense&nbsp;组件包裹多个懒加载组件","icons":[{"color":"rgb(255, 159, 26)","name":"priority","index":"3","text":"&#xe635"}]},{"parent":"a01eafed5bb9","note":"import React, { Suspense } from &#39;react&#39;;\nimport MyErrorBoundary from &#39;./MyErrorBoundary&#39;;\n\nconst OtherComponent = React.lazy(() =&gt; import(&#39;./OtherComponent&#39;));\nconst AnotherComponent = React.lazy(() =&gt; import(&#39;./AnotherComponent&#39;));\n\nconst MyComponent = () =&gt; (\n  &lt;div&gt;\n    &lt;MyErrorBoundary&gt;\n      &lt;Suspense fallback={&lt;div&gt;Loading...&lt;/div&gt;}&gt;\n        &lt;section&gt;\n          &lt;OtherComponent /&gt;\n          &lt;AnotherComponent /&gt;\n        &lt;/section&gt;\n      &lt;/Suspense&gt;\n    &lt;/MyErrorBoundary&gt;\n  &lt;/div&gt;\n);","children":[],"id":"a109122b444b","title":"<span style=\"font-size: inherit;\">如果模块加载失败（如网络问题），它会触发一个错误。<br>可以通过异常捕获边界（Error&nbsp;boundaries）技术来处理这些情况，以显示良好的用户体验并管理恢复事宜</span><br>","icons":[{"name":"","index":"42"}]}],"style":{"padding":"8px 10px 8px 10px","backgroundColor":"#2196F3","color":"#4A148C","textAlign":"left","font-weight":"bold","font-size":13,"border-color":"rgb(255, 255, 255)","font-style":"normal","border-radius":"5px","background-color":"#C8E6C9","lineStype":{"lineColor":"#F57F17","randomLineColor":"rgb(153,204,255)","lineWidth":"2"},"box-shadow":"1px 2px 6px #aaa","lineStyle":{"lineColor":"#C8E6C9","randomLineColor":"rgb(153,204,255)","lineWidth":"2"},"font-family":"微软雅黑","border-width":"0px","border-style":"none"},"id":"a01eafed5bb9","title":"React.lazy<br>"},{"parent":"root","lineStyle":{"lineColor":"#FFE0B2","lineWidth":"2"},"children":[{"parent":"cecb23f7996e","note":"这里是一个例子，展示如何在你的应用中使用 React.lazy 和 React Router 这类的第三方库，来配置基于路由的代码分割。\n\nimport React, { Suspense, lazy } from &#39;react&#39;;\nimport { BrowserRouter as Router, Route, Switch } from &#39;react-router-dom&#39;;\n\nconst Home = lazy(() =&gt; import(&#39;./routes/Home&#39;));\nconst About = lazy(() =&gt; import(&#39;./routes/About&#39;));\n\nconst App = () =&gt; (\n  &lt;Router&gt;\n    &lt;Suspense fallback={&lt;div&gt;Loading...&lt;/div&gt;}&gt;\n      &lt;Switch&gt;\n        &lt;Route exact path=&quot;/&quot; component={Home}/&gt;\n        &lt;Route path=&quot;/about&quot; component={About}/&gt;\n      &lt;/Switch&gt;\n    &lt;/Suspense&gt;\n  &lt;/Router&gt;\n);","children":[],"id":"10eb40fe09d6","title":"决定在哪引入代码分割需要一些技巧。你需要确保选择的位置能够均匀地分割代码包而不会影响用户体验。<br>一个不错的选择是从路由开始。大多数网络用户习惯于页面之间能有个加载切换过程。你也可以选择重新渲染整个页面，这样您的用户就不必在渲染的同时再和页面上的其他元素进行交互","icons":[]}],"style":{"padding":"8px 10px 8px 10px","backgroundColor":"#2196F3","color":"#4A148C","textAlign":"left","font-weight":"bold","font-size":13,"font-style":"normal","border-radius":"5px","background-color":"#FFE0B2","lineStype":{"lineColor":"#FFE0B2","lineWidth":"2"},"box-shadow":"1px 2px 6px #aaa","lineStyle":{"lineColor":"#FFE0B2","lineWidth":"2"},"font-family":"微软雅黑","border-width":0,"border-style":"solid"},"id":"cecb23f7996e","title":"基于路由的代码分割<br>"},{"parent":"root","lineStyle":{"lineColor":"#FFF9C4"},"children":[{"parent":"66325389a0c8","note":"// ManyComponents.js\nexport const MyComponent = /* ... */;\nexport const MyUnusedComponent = /* ... */;\n// MyComponent.js\nexport { MyComponent as default } from &quot;./ManyComponents.js&quot;;\n// MyApp.js\nimport React, { lazy } from &#39;react&#39;;\nconst MyComponent = lazy(() =&gt; import(&quot;./MyComponent.js&quot;));","lineStyle":{"lineColor":"#555","lineWidth":1},"children":[],"style":{"lineStype":{"lineColor":"#555","lineWidth":1},"padding":"2px 8px 2px 8px","color":"#E57373","lineStyle":{"lineColor":"#555","lineWidth":1},"textAlign":"left","font-weight":"normal","font-size":"13px","font-family":"微软雅黑","bold":false,"font-style":"normal","italic":false},"id":"6842066100ab","title":"React.lazy&nbsp;目前只支持默认导出（default&nbsp;exports）。如果你想被引入的模块使用命名导出（named&nbsp;exports），你可以创建一个中间模块，来重新导出为默认模块。这能保证&nbsp;tree&nbsp;shaking&nbsp;不会出错，并且不必引入不需要的组件","icons":[]}],"style":{"background-color":"#FFF9C4","border-radius":"5px","color":"#4A148C","font-weight":"bold","font-size":13,"border-color":"rgb(255, 255, 255)","border-width":"0px","border-style":"none"},"id":"66325389a0c8","title":"命名导出<br>"}],"root":true,"theme":"customise_7fd055efa78b","style":{"background-color":"rgb(255, 83, 92)","border-radius":"6px","color":"rgb(255, 255, 255)","font-weight":"bold","border-color":"rgb(255, 255, 255)","border-width":"0px","border-style":"none"},"id":"root","title":"代码分割","icons":[{"color":"rgb(255, 255, 255)","name":"","index":"52","text":"&#xe693"}],"structure":"mind_free"}},"meta":{"exportTime":"2022-04-02 14:15:40","member":"60cca488e0b34d55bbf2954f","diagramInfo":{"creator":"60cca488e0b34d55bbf2954f","created":"2022-03-15 10:42:35","modified":"2022-04-02 14:15:30","title":"3.2代码分割","category":"mind_free"},"id":"622ffd1b07912907c282df9d","type":"ProcessOn Schema File","version":"1.0"}}