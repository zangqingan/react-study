{"diagram":{"image":{"x":0,"width":200,"y":0,"pngdata":"iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAYAAACtWK6eAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAsUlEQVR4nO3BAQEAAACCIP+vbkhAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8GXHmAAFMgHIEAAAAAElFTkSuQmCC","height":200},"elements":{"leftChildren":[],"note":"","margin":{"childMarginW":10,"childMarginH":5,"marginW":20,"marginH":10},"watermark":"","children":[{"parent":"root","lineStyle":{"randomLineColor":"rgb(255,204,204)","lineColor":"#7B1FA2"},"children":[{"parent":"812b3a9306dd","note":"","children":[],"style":{"font-weight":"normal"},"id":"ac25a09c6779","title":"注意：自&nbsp;React&nbsp;v15.5&nbsp;起，React.PropTypes&nbsp;已移入另一个包中。请使用&nbsp;prop-types&nbsp;库&nbsp;代替","icons":[{"color":"rgb(191, 30, 27)","name":"priority","index":"0","text":"&#xe67a"}]},{"parent":"812b3a9306dd","note":"import PropTypes from &#39;prop-types&#39;;\n\nclass Greeting extends React.Component {\n  render() {\n    return (\n      &lt;h1&gt;Hello, {this.props.name}&lt;/h1&gt;\n    );\n  }\n}\n\nGreeting.propTypes = {\n  name: PropTypes.string\n};","children":[],"style":{"font-weight":"normal"},"id":"4d70d73dad33","title":"随着你的应用程序不断增长，你可以通过类型检查捕获大量错误。对于某些应用程序来说，你可以使用&nbsp;Flow&nbsp;或&nbsp;TypeScript&nbsp;等&nbsp;JavaScript&nbsp;扩展来对整个应用程序做类型检查。但即使你不使用这些扩展，React&nbsp;也内置了一些类型检查的功能。要在组件的&nbsp;props&nbsp;上进行类型检查，你只需配置特定的&nbsp;propTypes&nbsp;属性","icons":[{"color":"rgb(99, 171, 247)","name":"priority","index":"1","text":"&#xe625"}]},{"parent":"812b3a9306dd","children":[],"style":{"font-weight":"normal"},"id":"3ce2e9e4fcdf","title":"PropTypes&nbsp;提供一系列验证器，可用于确保组件接收到的数据类型是有效的。在本例中,&nbsp;我们使用了&nbsp;PropTypes.string。当传入的&nbsp;prop&nbsp;值类型不正确时，JavaScript&nbsp;控制台将会显示警告。出于性能方面的考虑，propTypes&nbsp;仅在开发模式下进行检查","icons":[{"color":"rgb(113, 203, 45)","name":"priority","index":"2","text":"&#xe62a"}]}],"style":{"background-color":"#7B1FA2","border-radius":"5px","color":"#FFCDD2","font-weight":"bold","font-size":13,"border-color":"rgb(255, 255, 255)","border-width":"0px","border-style":"none"},"id":"812b3a9306dd","title":"介绍"},{"parent":"root","lineStyle":{"lineColor":"#1976D2"},"children":[{"parent":"3b7f7da9d693","children":[{"parent":"bba802db2aa4","note":"import PropTypes from &#39;prop-types&#39;;\n\nMyComponent.propTypes = {\n  // 你可以将属性声明为 JS 原生类型，默认情况下\n  // 这些属性都是可选的。\n  optionalArray: PropTypes.array,\n  optionalBool: PropTypes.bool,\n  optionalFunc: PropTypes.func,\n  optionalNumber: PropTypes.number,\n  optionalObject: PropTypes.object,\n  optionalString: PropTypes.string,\n  optionalSymbol: PropTypes.symbol,\n\n  // 任何可被渲染的元素（包括数字、字符串、元素或数组）\n  // (或 Fragment) 也包含这些类型。\n  optionalNode: PropTypes.node,\n\n  // 一个 React 元素。\n  optionalElement: PropTypes.element,\n\n  // 一个 React 元素类型（即，MyComponent）。\n  optionalElementType: PropTypes.elementType,\n\n  // 你也可以声明 prop 为类的实例，这里使用\n  // JS 的 instanceof 操作符。\n  optionalMessage: PropTypes.instanceOf(Message),\n\n  // 你可以让你的 prop 只能是特定的值，指定它为\n  // 枚举类型。\n  optionalEnum: PropTypes.oneOf([&#39;News&#39;, &#39;Photos&#39;]),\n\n  // 一个对象可以是几种类型中的任意一个类型\n  optionalUnion: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.instanceOf(Message)\n  ]),\n\n  // 可以指定一个数组由某一类型的元素组成\n  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),\n\n  // 可以指定一个对象由某一类型的值组成\n  optionalObjectOf: PropTypes.objectOf(PropTypes.number),\n\n  // 可以指定一个对象由特定的类型值组成\n  optionalObjectWithShape: PropTypes.shape({\n    color: PropTypes.string,\n    fontSize: PropTypes.number\n  }),\n  \n  // An object with warnings on extra properties\n  optionalObjectWithStrictShape: PropTypes.exact({\n    name: PropTypes.string,\n    quantity: PropTypes.number\n  }),   \n\n  // 你可以在任何 PropTypes 属性后面加上 `isRequired` ，确保\n  // 这个 prop 没有被提供时，会打印警告信息。\n  requiredFunc: PropTypes.func.isRequired,\n\n  // 任意类型的数据\n  requiredAny: PropTypes.any.isRequired,\n\n  // 你可以指定一个自定义验证器。它在验证失败时应返回一个 Error 对象。\n  // 请不要使用 `console.warn` 或抛出异常，因为这在 `onOfType` 中不会起作用。\n  customProp: function(props, propName, componentName) {\n    if (!/matchme/.test(props[propName])) {\n      return new Error(\n        &#39;Invalid prop `&#39; + propName + &#39;` supplied to&#39; +\n        &#39; `&#39; + componentName + &#39;`. Validation failed.&#39;\n      );\n    }\n  },\n\n  // 你也可以提供一个自定义的 `arrayOf` 或 `objectOf` 验证器。\n  // 它应该在验证失败时返回一个 Error 对象。\n  // 验证器将验证数组或对象中的每个值。验证器的前两个参数\n  // 第一个是数组或对象本身\n  // 第二个是他们当前的键。\n  customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) {\n    if (!/matchme/.test(propValue[key])) {\n      return new Error(\n        &#39;Invalid prop `&#39; + propFullName + &#39;` supplied to&#39; +\n        &#39; `&#39; + componentName + &#39;`. Validation failed.&#39;\n      );\n    }\n  })\n};\n","children":[],"id":"b7cedf741d9e","title":"代码"}],"id":"bba802db2aa4","title":"以下提供了使用不同验证器的例子"}],"boundaries":[],"style":{"background-color":"#1976D2","border-radius":"5px","color":"#FFCDD2","font-weight":"bold","font-size":13},"id":"3b7f7da9d693","title":"PropTypes"},{"parent":"root","lineStyle":{"randomLineColor":"rgb(153,204,255)","lineColor":"#388E3C"},"children":[{"parent":"0291282e6d37","children":[{"parent":"9b98b3d53be3","note":"import PropTypes from &#39;prop-types&#39;;\n\nclass MyComponent extends React.Component {\n  render() {\n    // 这必须只有一个元素，否则控制台会打印警告。\n    const children = this.props.children;\n    return (\n      &lt;div&gt;\n        {children}\n      &lt;/div&gt;\n    );\n  }\n}\n\nMyComponent.propTypes = {\n  children: PropTypes.element.isRequired\n};\n","children":[],"id":"11ae1de4ac35","title":"代码"}],"id":"9b98b3d53be3","title":"你可以通过&nbsp;PropTypes.element&nbsp;来确保传递给组件的&nbsp;children&nbsp;中只包含一个元素"}],"style":{"background-color":"#388E3C","border-radius":"5px","color":"#FFCDD2","font-weight":"bold","font-size":13,"border-color":"rgb(255, 255, 255)","border-width":"0px","border-style":"none"},"id":"0291282e6d37","title":"限制单个元素<br>"},{"parent":"root","lineStyle":{"randomLineColor":"rgb(153,204,255)","lineColor":"#F57F17"},"children":[{"parent":"b653f7534587","lineStyle":{"lineColor":"#555","lineWidth":1},"children":[{"parent":"09c359863911","note":"class Greeting extends React.Component {\n  render() {\n    return (\n      &lt;h1&gt;Hello, {this.props.name}&lt;/h1&gt;\n    );\n  }\n}\n\n// 指定 props 的默认值：\nGreeting.defaultProps = {\n  name: &#39;Stranger&#39;\n};\n\n// 渲染出 &quot;Hello, Stranger&quot;：\nReactDOM.render(\n  &lt;Greeting /&gt;,\n  document.getElementById(&#39;example&#39;)\n);","children":[],"id":"aff364b7827e","title":"代码"}],"style":{"lineStype":{"lineType":"curve","lineColor":"#555","lineWidth":1},"padding":"2px 8px 2px 8px","color":"#666","lineStyle":{"lineColor":"#555","lineWidth":1},"textAlign":"left","font-weight":"normal","font-size":"13px","font-family":"微软雅黑","bold":false,"font-style":"normal","italic":false},"id":"09c359863911","title":"您可以通过配置特定的&nbsp;defaultProps&nbsp;属性来定义&nbsp;props&nbsp;的默认值","icons":[{"color":"rgb(99, 171, 247)","name":"priority","index":"0","text":"&#xe67a"}]},{"parent":"b653f7534587","lineStyle":{"lineColor":"#555","lineWidth":1},"children":[],"style":{"lineStype":{"lineType":"curve","lineColor":"#555","lineWidth":1},"padding":"2px 8px 2px 8px","color":"#666","lineStyle":{"lineColor":"#555","lineWidth":1},"textAlign":"left","font-weight":"normal","font-size":"13px","font-family":"微软雅黑","bold":false,"font-style":"normal","italic":false},"id":"a055a844090f","title":"如果你正在使用像&nbsp;transform-class-properties&nbsp;的&nbsp;Babel&nbsp;转换工具，你也可以在&nbsp;React&nbsp;组件类中声明&nbsp;defaultProps&nbsp;作为静态属性。此语法提案还没有最终确定，需要进行编译后才能在浏览器中运行。","icons":[{"color":"rgb(113, 203, 45)","name":"priority","index":"1","text":"&#xe625"}]},{"parent":"b653f7534587","lineStyle":{"lineColor":"#555","lineWidth":1},"children":[{"parent":"0dfdea6aa31e","children":[],"id":"6ad9137367dc","title":"https://github.com/tc39/proposal-class-fields"}],"style":{"lineStype":{"lineType":"curve","lineColor":"#555","lineWidth":1},"padding":"2px 8px 2px 8px","color":"#666","lineStyle":{"lineColor":"#555","lineWidth":1},"textAlign":"left","font-weight":"normal","font-size":"13px","font-family":"微软雅黑","bold":false,"font-style":"normal","italic":false},"id":"0dfdea6aa31e","title":"要了解更多信息，请查阅&nbsp;class&nbsp;fields&nbsp;proposal","icons":[{"color":"rgb(255, 159, 26)","name":"priority","index":"2","text":"&#xe62a"}]}],"style":{"background-color":"#F57F17","border-radius":"5px","color":"#FFCDD2","font-weight":"bold","font-size":13,"border-color":"rgb(255, 255, 255)","border-width":"0px","border-style":"none"},"id":"b653f7534587","title":"默认&nbsp;Prop&nbsp;值"}],"root":true,"theme":"customise_7fd055efa78b","style":{"background-color":"rgb(255, 83, 92)","border-radius":"6px","color":"rgb(255, 255, 255)","font-weight":"bold","border-color":"rgb(255, 255, 255)","border-width":"0px","border-style":"none"},"id":"root","title":"使用&nbsp;PropTypes","icons":[{"color":"rgb(255, 255, 255)","name":"","index":"53","text":"&#xe693"}],"structure":"mind_free"}},"meta":{"exportTime":"2022-04-08 23:23:16","member":"60cca488e0b34d55bbf2954f","diagramInfo":{"creator":"60cca488e0b34d55bbf2954f","created":"2022-04-08 23:15:54","modified":"2022-04-08 23:23:00","title":"3.20使用 PropTypes 进行类型检查","category":"mind_free"},"id":"625051aaf346fb1da6743036","type":"ProcessOn Schema File","version":"1.0"}}