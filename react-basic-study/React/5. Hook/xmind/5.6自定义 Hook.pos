{"diagram":{"image":{"x":0,"width":200,"y":0,"pngdata":"iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAYAAACtWK6eAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAsUlEQVR4nO3BAQEAAACCIP+vbkhAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8GXHmAAFMgHIEAAAAAElFTkSuQmCC","height":200},"elements":{"leftChildren":[],"note":"","margin":{"childMarginW":10,"childMarginH":5,"marginW":20,"marginH":10},"watermark":"","children":[{"parent":"root","lineStyle":{"lineColor":"#F57F17","randomLineColor":"rgb(153,204,255)","lineWidth":"2"},"children":[{"parent":"20c25e0a8bcb","children":[],"id":"b92b8eb59c75","title":"通过自定义&nbsp;Hook，可以将组件逻辑提取到可重用的函数中"}],"style":{"padding":"8px 10px 8px 10px","backgroundColor":"#2196F3","color":"#212121","textAlign":"left","font-weight":"bold","font-size":13,"border-color":"rgb(255, 255, 255)","bold":false,"font-style":"normal","italic":false,"border-radius":"5px","background-color":"#C8E6C9","lineStype":{"lineType":"curve","lineColor":"#F57F17","randomLineColor":"rgb(153,204,255)","lineWidth":"2"},"box-shadow":"1px 2px 6px #aaa","lineStyle":{"lineColor":"#F57F17","randomLineColor":"rgb(153,204,255)","lineWidth":"2"},"font-family":"微软雅黑","border-width":"0px","border-style":"none"},"id":"20c25e0a8bcb","title":"作用<br>"},{"parent":"root","lineStyle":{"lineColor":"#FFCDD2","randomLineColor":"rgb(153,204,255)","lineWidth":"2"},"children":[{"parent":"4a4e937a1166","children":[],"id":"26f6456c6af4","title":"当我们想在两个函数之间共享逻辑时，我们会把它提取到第三个函数中。而组件和&nbsp;Hook&nbsp;都是函数，所以也同样适用这种方式","icons":[{"color":"rgb(191, 30, 27)","name":"priority","index":"0","text":"&#xe67a"}]},{"parent":"4a4e937a1166","children":[],"style":{"color":"#FF00FF","font-weight":"bold"},"id":"38155145bf86","title":"自定义&nbsp;Hook&nbsp;是一个函数，其名称以&nbsp;“use”&nbsp;开头，函数内部可以调用其他的&nbsp;Hook","icons":[{"color":"rgb(255, 159, 26)","name":"priority","index":"1","text":"&#xe625"}]},{"parent":"4a4e937a1166","children":[],"id":"b91414026afa","title":"与&nbsp;React&nbsp;组件不同的是，自定义&nbsp;Hook&nbsp;不需要具有特殊的标识。我们可以自由的决定它的参数是什么，以及它应该返回什么（如果需要的话）。换句话说，它就像一个正常的函数。但是它的名字应该始终以&nbsp;use&nbsp;开头，这样可以一眼看出其符合&nbsp;Hook&nbsp;的规则","icons":[{"color":"rgb(48, 191, 191)","name":"priority","index":"2","text":"&#xe62a"}]}],"style":{"padding":"8px 10px 8px 10px","backgroundColor":"#2196F3","color":"#212121","textAlign":"left","font-weight":"bold","font-size":13,"border-color":"rgb(255, 255, 255)","bold":false,"font-style":"normal","italic":false,"border-radius":"5px","background-color":"#FFCDD2","lineStype":{"lineType":"curve","lineColor":"#FFCDD2","randomLineColor":"rgb(153,204,255)","lineWidth":"2"},"box-shadow":"1px 2px 6px #aaa","lineStyle":{"lineColor":"#FFCDD2","randomLineColor":"rgb(153,204,255)","lineWidth":"2"},"font-family":"微软雅黑","border-width":"0px","border-style":"none"},"id":"4a4e937a1166","title":"提取自定义&nbsp;Hook"},{"parent":"root","lineStyle":{"randomLineColor":"rgb(255,204,204)","lineColor":"#BBDEFB"},"children":[{"parent":"812b3a9306dd","children":[{"parent":"81d4842d0d98","children":[],"id":"db68524a5a0a","title":"必须如此。这个约定非常重要。<br>不遵循的话，由于无法判断某个函数是否包含对其内部&nbsp;Hook&nbsp;的调用，React&nbsp;将无法自动检查你的&nbsp;Hook&nbsp;是否违反了&nbsp;Hook&nbsp;的规则"}],"id":"81d4842d0d98","title":"自定义&nbsp;Hook&nbsp;必须以&nbsp;“use”&nbsp;开头吗？","icons":[{"color":"rgb(191, 30, 27)","name":"priority","index":"0","text":"&#xe67a"}]},{"parent":"812b3a9306dd","children":[{"parent":"0b4b0647241b","children":[],"id":"a678d82ae318","title":"不会。自定义&nbsp;Hook&nbsp;是一种重用状态逻辑的机制，<br>所以每次使用自定义&nbsp;Hook&nbsp;时，其中的所有&nbsp;state&nbsp;和副作用都是完全隔离的"}],"id":"0b4b0647241b","title":"在两个组件中使用相同的&nbsp;Hook&nbsp;会共享&nbsp;state&nbsp;吗？","icons":[{"color":"rgb(255, 159, 26)","name":"priority","index":"1","text":"&#xe625"}]},{"parent":"812b3a9306dd","children":[{"parent":"c7a801273750","children":[],"id":"960eb3f38360","title":"每次调用&nbsp;Hook，它都会获取独立的&nbsp;state"}],"id":"c7a801273750","title":"自定义&nbsp;Hook&nbsp;如何获取独立的&nbsp;state？","icons":[{"color":"rgb(48, 191, 191)","name":"priority","index":"2","text":"&#xe62a"}]},{"parent":"812b3a9306dd","children":[{"parent":"6ff2bce77fa9","children":[],"id":"81d43bb295ae","title":"由于&nbsp;Hook&nbsp;本身就是函数，因此我们可以在它们之间传递信息"}],"id":"6ff2bce77fa9","title":"提示：在多个&nbsp;Hook&nbsp;之间传递信息"}],"style":{"background-color":"#BBDEFB","border-radius":"5px","color":"#212121","font-weight":"bold","font-size":13,"border-color":"rgb(255, 255, 255)","border-width":"0px","border-style":"none"},"id":"812b3a9306dd","title":"使用自定义&nbsp;Hook<br>"},{"parent":"root","lineStyle":{"randomLineColor":"rgb(153,204,255)","lineColor":"#F57F17"},"children":[{"parent":"b653f7534587","note":"function todosReducer(state, action) {\n  switch (action.type) {\n    case &#39;add&#39;:\n      return [...state, {\n        text: action.text,\n        completed: false\n      }];\n    // ... other actions ...\n    default:\n      return state;\n  }\n}","children":[],"id":"3d72025d5a72","title":"自定义&nbsp;Hook&nbsp;解决了以前在&nbsp;React&nbsp;组件中无法灵活共享逻辑的问题。你可以创建涵盖各种场景的自定义&nbsp;Hook，如表单处理、动画、订阅声明、计时器，甚至可能还有其他我们没想到的场景。更重要的是，创建自定义&nbsp;Hook&nbsp;就像使用&nbsp;React&nbsp;内置的功能一样简单。<br><br>尽量避免过早地增加抽象逻辑。既然函数组件能够做的更多，那么代码库中函数组件的代码行数可能会剧增。这属于正常现象&nbsp;——&nbsp;不必立即将它们拆分为&nbsp;Hook。但我们仍鼓励你能通过自定义&nbsp;Hook&nbsp;寻找可能，以达到简化代码逻辑，解决组件杂乱无章的目的。<br><br>例如，有个复杂的组件，其中包含了大量以特殊的方式来管理的内部状态。useState&nbsp;并不会使得集中更新逻辑变得容易，因此你可能更愿意使用&nbsp;redux&nbsp;中的&nbsp;reducer&nbsp;来编写。","icons":[{"color":"rgb(191, 30, 27)","name":"priority","index":"0","text":"&#xe67a"}]},{"parent":"b653f7534587","note":"function useReducer(reducer, initialState) {\n  const [state, setState] = useState(initialState);\n\n  function dispatch(action) {\n    const nextState = reducer(state, action);\n    setState(nextState);\n  }\n\n  return [state, dispatch];\n}","children":[],"id":"fe34edd8c073","title":"Reducers&nbsp;非常便于单独测试，且易于扩展，以表达复杂的更新逻辑。如有必要，您可以将它们分成更小的&nbsp;reducer。但是，你可能还享受着&nbsp;React&nbsp;内部&nbsp;state&nbsp;带来的好处，或者可能根本不想安装其他库。<br><br>那么，为什么我们不编写一个&nbsp;useReducer&nbsp;的&nbsp;Hook，使用&nbsp;reducer&nbsp;的方式来管理组件的内部&nbsp;state&nbsp;呢？其简化版本可能如下所示","icons":[{"color":"rgb(255, 159, 26)","name":"priority","index":"1","text":"&#xe625"}]},{"parent":"b653f7534587","note":"function Todos() {\n  const [todos, dispatch] = useReducer(todosReducer, []);\n\n  function handleAddClick(text) {\n    dispatch({ type: &#39;add&#39;, text });\n  }\n\n  // ...\n}","children":[],"id":"e9a243ea5d97","title":"在组件中使用它，让&nbsp;reducer&nbsp;驱动它管理&nbsp;state","icons":[{"color":"rgb(48, 191, 191)","name":"priority","index":"2","text":"&#xe62a"}]}],"style":{"background-color":"#C8E6C9","border-radius":"5px","color":"#212121","font-weight":"bold","font-size":13,"border-color":"rgb(255, 255, 255)","border-width":"0px","border-style":"none"},"id":"b653f7534587","title":"useYourImagination()"}],"root":true,"theme":"customise_7fd055efa78b","style":{"background-color":"rgb(255, 83, 92)","border-radius":"6px","color":"rgb(255, 255, 255)","font-weight":"bold","font-size":15,"border-color":"rgb(255, 255, 255)","border-width":"0px","border-style":"none"},"id":"root","title":"自定义&nbsp;Hook","icons":[{"color":"rgb(255, 255, 255)","name":"","index":"48"}],"structure":"mind_right"}},"meta":{"exportTime":"2022-04-10 22:53:56","member":"60cca488e0b34d55bbf2954f","diagramInfo":{"creator":"60cca488e0b34d55bbf2954f","created":"2022-04-10 22:45:33","modified":"2022-04-10 22:53:31","title":"5.6","category":"mind_free"},"id":"6252ed8d0791290727bdb2ac","type":"ProcessOn Schema File","version":"1.0"}}