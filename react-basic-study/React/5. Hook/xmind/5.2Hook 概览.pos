{"diagram":{"image":{"x":0,"width":200,"y":0,"pngdata":"iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAYAAACtWK6eAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAsUlEQVR4nO3BAQEAAACCIP+vbkhAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8GXHmAAFMgHIEAAAAAElFTkSuQmCC","height":200},"elements":{"leftChildren":[],"note":"","margin":{"childMarginW":10,"childMarginH":5,"marginW":20,"marginH":10},"watermark":"","children":[{"parent":"root","lineStyle":{"lineColor":"#F57F17","randomLineColor":"rgb(153,204,255)","lineWidth":"2"},"children":[{"parent":"20c25e0a8bcb","children":[{"parent":"f78f08564058","note":"import React, { useState } from &#39;react&#39;;\n\nfunction Example() {\n  // 声明一个叫 “count” 的 state 变量。\n  const [count, setCount] = useState(0);\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;You clicked {count} times&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;\n        Click me\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}","children":[],"id":"1572342f80be","title":"例：显示一个计数器，当你点击按钮，计数器的值就会增加"},{"parent":"f78f08564058","children":[],"id":"9e0327a0feed","title":"在这里，useState&nbsp;就是一个&nbsp;Hook"},{"parent":"f78f08564058","children":[],"id":"4666bb6a4e6c","title":"通过在函数组件里调用它来给组件添加一些内部&nbsp;state。React&nbsp;会在重复渲染时保留这个&nbsp;state。useState&nbsp;会返回一对值：当前状态和一个让你更新它的函数，你可以在事件处理函数中或其他一些地方调用这个函数。它类似&nbsp;class&nbsp;组件的&nbsp;this.setState，但是它不会把新的&nbsp;state&nbsp;和旧的&nbsp;state&nbsp;进行合并"},{"parent":"f78f08564058","children":[],"id":"3cde8ec284c2","title":"useState&nbsp;唯一的参数就是初始&nbsp;state。在上面的例子中，我们的计数器是从零开始的，所以初始&nbsp;state&nbsp;就是&nbsp;0。<br>值得注意的是，不同于&nbsp;this.state，这里的&nbsp;state&nbsp;不一定要是一个对象<br>这个初始&nbsp;state&nbsp;参数只有在第一次渲染时会被用到<br>"}],"id":"f78f08564058","title":"从一个例子开始","icons":[{"color":"rgb(191, 30, 27)","name":"priority","index":"0","text":"&#xe67a"}]},{"parent":"20c25e0a8bcb","children":[{"parent":"3879dd9b233d","note":"function ExampleWithManyStates() {\n  // 声明多个 state 变量！\n  const [age, setAge] = useState(42);\n  const [fruit, setFruit] = useState(&#39;banana&#39;);\n  const [todos, setTodos] = useState([{ text: &#39;Learn Hooks&#39; }]);\n  // ...\n}","children":[],"id":"16618fd64ca0","title":"你可以在一个组件中多次使用&nbsp;State&nbsp;Hook"},{"parent":"3879dd9b233d","children":[],"id":"e0e43f8c6280","title":"数组解构的语法让我们在调用&nbsp;useState&nbsp;时可以给&nbsp;state&nbsp;变量取不同的名字。当然，这些名字并不是&nbsp;useState&nbsp;API&nbsp;的一部分。React&nbsp;假设当你多次调用&nbsp;useState&nbsp;的时候，你能保证每次渲染时它们的调用顺序是不变的"}],"id":"3879dd9b233d","title":"声明多个&nbsp;state&nbsp;变量","icons":[{"color":"rgb(255, 159, 26)","name":"priority","index":"1","text":"&#xe625"}]},{"parent":"20c25e0a8bcb","children":[{"parent":"9ad2ebdb547a","children":[],"style":{"color":"#E57373","font-weight":"bold"},"id":"ccb2b27dd8be","title":"Hook&nbsp;是一些可以让你在函数组件里“钩入”&nbsp;React&nbsp;state&nbsp;及生命周期等特性的函数"},{"parent":"9ad2ebdb547a","children":[],"id":"1d9ce9c74973","title":"React&nbsp;内置了一些像&nbsp;useState&nbsp;这样的&nbsp;Hook。你也可以创建你自己的&nbsp;Hook&nbsp;来复用不同组件之间的状态逻辑"}],"id":"9ad2ebdb547a","title":"什么是&nbsp;Hook","icons":[{"color":"rgb(48, 191, 191)","name":"priority","index":"2","text":"&#xe62a"}]}],"style":{"padding":"8px 10px 8px 10px","backgroundColor":"#2196F3","color":"#212121","textAlign":"left","font-weight":"bold","font-size":13,"border-color":"rgb(255, 255, 255)","bold":false,"font-style":"normal","italic":false,"border-radius":"5px","background-color":"#C8E6C9","lineStype":{"lineType":"curve","lineColor":"#F57F17","randomLineColor":"rgb(153,204,255)","lineWidth":"2"},"box-shadow":"1px 2px 6px #aaa","lineStyle":{"lineColor":"#F57F17","randomLineColor":"rgb(153,204,255)","lineWidth":"2"},"font-family":"微软雅黑","border-width":"0px","border-style":"none"},"id":"20c25e0a8bcb","title":"📌&nbsp;State&nbsp;Hook<br>"},{"parent":"root","lineStyle":{"lineColor":"#FFCDD2","randomLineColor":"rgb(153,204,255)","lineWidth":"2"},"children":[{"parent":"4a4e937a1166","children":[],"id":"26f6456c6af4","title":"你之前可能已经在&nbsp;React&nbsp;组件中执行过数据获取、订阅或者手动修改过&nbsp;DOM。我们统一把这些操作称为“副作用”，或者简称为“作用”","icons":[{"color":"rgb(191, 30, 27)","name":"priority","index":"0","text":"&#xe67a"}]},{"parent":"4a4e937a1166","children":[],"id":"38155145bf86","title":"useEffect&nbsp;就是一个&nbsp;Effect&nbsp;Hook，给函数组件增加了操作副作用的能力。它跟&nbsp;class&nbsp;组件中的&nbsp;componentDidMount、componentDidUpdate&nbsp;和&nbsp;componentWillUnmount&nbsp;具有相同的用途，只不过被合并成了一个&nbsp;API","icons":[{"color":"rgb(255, 159, 26)","name":"priority","index":"1","text":"&#xe625"}]},{"parent":"4a4e937a1166","children":[{"parent":"b91414026afa","children":[{"parent":"7984c1d60b91","note":"import React, { useState, useEffect } from &#39;react&#39;;\n\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  // 相当于 componentDidMount 和 componentDidUpdate:\n  useEffect(() =&gt; {\n    // 使用浏览器的 API 更新页面标题\n    document.title = `You clicked ${count} times`;\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;You clicked {count} times&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;\n        Click me\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}","children":[],"id":"e0d5e7912df7","title":"代码"}],"id":"7984c1d60b91","title":"下面这个组件在&nbsp;React&nbsp;更新&nbsp;DOM&nbsp;后会设置一个页面标题"}],"id":"b91414026afa","title":"例子","icons":[{"color":"rgb(48, 191, 191)","name":"priority","index":"2","text":"&#xe62a"}]},{"parent":"4a4e937a1166","children":[],"id":"34c5d83e7764","title":"当你调用&nbsp;useEffect&nbsp;时，就是在告诉&nbsp;React&nbsp;在完成对&nbsp;DOM&nbsp;的更改后运行你的“副作用”函数。由于副作用函数是在组件内声明的，所以它们可以访问到组件的&nbsp;props&nbsp;和&nbsp;state。默认情况下，React&nbsp;会在每次渲染后调用副作用函数&nbsp;——&nbsp;包括第一次渲染的时候<br>副作用函数还可以通过返回一个函数来指定如何“清除”副作用<br>","icons":[{"color":"rgb(99, 171, 247)","name":"priority","index":"3"}]},{"parent":"4a4e937a1166","children":[],"id":"45384abd8c12","title":"跟&nbsp;useState&nbsp;一样，你可以在组件中多次使用&nbsp;useEffect","icons":[{"color":"rgb(113, 203, 45)","name":"priority","index":"4"}]}],"style":{"padding":"8px 10px 8px 10px","backgroundColor":"#2196F3","color":"#212121","textAlign":"left","font-weight":"bold","font-size":13,"border-color":"rgb(255, 255, 255)","bold":false,"font-style":"normal","italic":false,"border-radius":"5px","background-color":"#FFCDD2","lineStype":{"lineType":"curve","lineColor":"#FFCDD2","randomLineColor":"rgb(153,204,255)","lineWidth":"2"},"box-shadow":"1px 2px 6px #aaa","lineStyle":{"lineColor":"#FFCDD2","randomLineColor":"rgb(153,204,255)","lineWidth":"2"},"font-family":"微软雅黑","border-width":"0px","border-style":"none"},"id":"4a4e937a1166","title":"⚡️&nbsp;Effect&nbsp;Hook"},{"parent":"root","lineStyle":{"lineColor":"#E0E0E0","lineWidth":"2"},"children":[{"parent":"90f72e9b7182","children":[],"id":"7c49f52ec5d6","title":"Hook&nbsp;就是&nbsp;JavaScript&nbsp;函数，但是使用它们会有两个额外的规则"},{"parent":"90f72e9b7182","lineStyle":{"lineColor":"#555","lineWidth":1},"children":[],"style":{"lineStype":{"lineType":"roundBroken","lineColor":"#555","lineWidth":1},"padding":"2px 8px 2px 8px","color":"#E57373","lineStyle":{"lineColor":"#555","lineWidth":1},"textAlign":"left","font-weight":"bold","font-size":"13px","font-family":"微软雅黑","bold":false,"font-style":"normal","italic":false},"id":"b06f894eea5b","title":"只能在函数最外层调用&nbsp;Hook。不要在循环、条件判断或者子函数中调用","icons":[{"color":"rgb(191, 30, 27)","name":"priority","index":"0","text":"&#xe67a"}]},{"parent":"90f72e9b7182","lineStyle":{"lineColor":"#555","lineWidth":1},"children":[],"style":{"lineStype":{"lineType":"roundBroken","lineColor":"#555","lineWidth":1},"padding":"2px 8px 2px 8px","color":"#E57373","lineStyle":{"lineColor":"#555","lineWidth":1},"textAlign":"left","font-weight":"bold","font-size":"13px","font-family":"微软雅黑","bold":false,"font-style":"normal","italic":false},"id":"ee780be90c30","title":"只能在&nbsp;React&nbsp;的函数组件中调用&nbsp;Hook。不要在其他&nbsp;JavaScript&nbsp;函数中调用","icons":[{"color":"rgb(255, 159, 26)","name":"priority","index":"1","text":"&#xe625"}]}],"style":{"padding":"8px 10px 8px 10px","backgroundColor":"#2196F3","color":"#212121","textAlign":"left","font-weight":"bold","font-size":13,"bold":false,"font-style":"normal","italic":false,"border-radius":"5px","background-color":"#E0E0E0","lineStype":{"lineType":"curve","lineColor":"#FFE0B2","lineWidth":"2"},"box-shadow":"1px 2px 6px #aaa","lineStyle":{"lineColor":"#E0E0E0","lineWidth":"2"},"font-family":"微软雅黑","border-width":0,"border-style":"solid"},"id":"90f72e9b7182","title":"✌️&nbsp;Hook&nbsp;使用规则"},{"parent":"root","lineStyle":{"lineColor":"#BBDEFB","randomLineColor":"rgb(255,204,204)","lineWidth":"2"},"children":[{"parent":"a5fa884e620f","children":[],"id":"d3742cff6e16","title":"有时候我们会想要在组件之间重用一些状态逻辑。目前为止，有两种主流方案来解决这个问题：高阶组件和&nbsp;render&nbsp;props。自定义&nbsp;Hook&nbsp;可以让你在不增加组件的情况下达到同样的目的","icons":[{"color":"rgb(191, 30, 27)","name":"priority","index":"0","text":"&#xe67a"}]},{"parent":"a5fa884e620f","children":[],"id":"bef60e8cb745","title":"Hook&nbsp;是一种复用状态逻辑的方式，它不复用&nbsp;state&nbsp;本身。事实上&nbsp;Hook&nbsp;的每次调用都有一个完全独立的&nbsp;state&nbsp;——&nbsp;因此你可以在单个组件中多次调用同一个自定义&nbsp;Hook","icons":[{"color":"rgb(255, 159, 26)","name":"priority","index":"1","text":"&#xe625"}]},{"parent":"a5fa884e620f","children":[],"id":"15f28685b324","title":"自定义&nbsp;Hook&nbsp;更像是一种约定而不是功能。如果函数的名字以&nbsp;“use”&nbsp;开头并调用其他&nbsp;Hook，我们就说这是一个自定义&nbsp;Hook。&nbsp;useSomething&nbsp;的命名约定可以让我们的&nbsp;linter&nbsp;插件在使用&nbsp;Hook&nbsp;的代码中找到&nbsp;bug","icons":[{"color":"rgb(48, 191, 191)","name":"priority","index":"2","text":"&#xe62a"}]}],"style":{"padding":"8px 10px 8px 10px","backgroundColor":"#2196F3","color":"#212121","textAlign":"left","font-weight":"bold","font-size":13,"border-color":"rgb(255, 255, 255)","bold":false,"font-style":"normal","italic":false,"border-radius":"5px","background-color":"#BBDEFB","lineStype":{"lineType":"curve","lineColor":"#BBDEFB","randomLineColor":"rgb(255,204,204)","lineWidth":"2"},"box-shadow":"1px 2px 6px #aaa","lineStyle":{"lineColor":"#BBDEFB","randomLineColor":"rgb(255,204,204)","lineWidth":"2"},"font-family":"微软雅黑","border-width":"0px","border-style":"none"},"id":"a5fa884e620f","title":"💡&nbsp;自定义&nbsp;Hook"},{"parent":"root","lineStyle":{"lineColor":"#E1BEE7"},"children":[{"parent":"3b7f7da9d693","children":[],"id":"3d72025d5a72","title":"除此之外，还有一些使用频率较低的但是很有用的&nbsp;Hook。比如，useContext&nbsp;让你不使用组件嵌套就可以订阅&nbsp;React&nbsp;的&nbsp;Context","icons":[{"color":"rgb(191, 30, 27)","name":"priority","index":"0","text":"&#xe67a"}]},{"parent":"3b7f7da9d693","children":[],"id":"c79ce255c680","title":"另外&nbsp;useReducer&nbsp;可以让你通过&nbsp;reducer&nbsp;来管理组件本地的复杂&nbsp;state","icons":[{"color":"rgb(255, 159, 26)","name":"priority","index":"1","text":"&#xe625"}]}],"style":{"background-color":"#E1BEE7","border-radius":"5px","color":"#212121","font-weight":"bold","font-size":13},"id":"3b7f7da9d693","title":"🔌&nbsp;其他&nbsp;Hook"}],"root":true,"theme":"customise_7fd055efa78b","style":{"background-color":"rgb(255, 83, 92)","border-radius":"6px","color":"rgb(255, 255, 255)","font-weight":"bold","font-size":15,"border-color":"rgb(255, 255, 255)","border-width":"0px","border-style":"none"},"id":"root","title":"Hook&nbsp;概览","icons":[{"color":"rgb(99, 171, 247)","name":"","index":"52"}],"structure":"mind_right"}},"meta":{"exportTime":"2022-04-10 21:42:10","member":"60cca488e0b34d55bbf2954f","diagramInfo":{"creator":"60cca488e0b34d55bbf2954f","created":"2022-04-10 21:23:58","modified":"2022-04-10 21:42:03","title":"5.2Hook 概览","category":"mind_free"},"id":"6252da6e0e3e74116836aa1f","type":"ProcessOn Schema File","version":"1.0"}}