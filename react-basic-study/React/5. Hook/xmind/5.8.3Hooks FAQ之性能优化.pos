{"diagram":{"image":{"x":0,"width":200,"y":0,"pngdata":"iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAYAAACtWK6eAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAsUlEQVR4nO3BAQEAAACCIP+vbkhAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8GXHmAAFMgHIEAAAAAElFTkSuQmCC","height":200},"elements":{"leftChildren":[],"note":"","margin":{"childMarginW":10,"childMarginH":5,"marginW":20,"marginH":10},"watermark":"","children":[{"parent":"root","lineStyle":{"randomLineColor":"rgb(255,204,204)","lineColor":"#BBDEFB"},"children":[{"parent":"812b3a9306dd","children":[{"parent":"81d4842d0d98","children":[],"id":"50dc7b2b442e","title":"可以的"}],"id":"81d4842d0d98","title":"我可以在更新时跳过&nbsp;effect&nbsp;吗？","icons":[{"color":"rgb(191, 30, 27)","name":"priority","index":"0","text":"&#xe67a"}]},{"parent":"812b3a9306dd","children":[{"parent":"0b4b0647241b","children":[],"id":"3094d56dac18","title":"一般来说，不安全。"}],"id":"0b4b0647241b","title":"在依赖列表中省略函数是否安全？","icons":[{"color":"rgb(255, 159, 26)","name":"priority","index":"1","text":"&#xe625"}]},{"parent":"812b3a9306dd","children":[{"parent":"c7a801273750","children":[],"id":"2bc74339074a","title":"你可以用&nbsp;React.memo&nbsp;包裹一个组件来对它的&nbsp;props&nbsp;进行浅比较"}],"id":"c7a801273750","title":"我该如何实现&nbsp;shouldComponentUpdate?","icons":[{"color":"rgb(48, 191, 191)","name":"priority","index":"2","text":"&#xe62a"}]}],"style":{"background-color":"#BBDEFB","border-radius":"5px","color":"#212121","font-weight":"bold","font-size":13,"border-color":"rgb(255, 255, 255)","border-width":"0px","border-style":"none"},"id":"812b3a9306dd","title":"一<br>"},{"parent":"root","lineStyle":{"lineColor":"#E1BEE7"},"children":[{"parent":"3b7f7da9d693","children":[{"parent":"3d72025d5a72","children":[],"id":"0f79d2201fe3","title":"useMemo&nbsp;Hook&nbsp;允许你通过「记住」上一次计算结果的方式在多次渲染的之间缓存计算结果"}],"id":"3d72025d5a72","title":"如何记忆计算结果？","icons":[{"color":"rgb(191, 30, 27)","name":"priority","index":"0","text":"&#xe67a"}]},{"parent":"3b7f7da9d693","children":[{"parent":"c79ce255c680","children":[],"id":"ac890936478b","title":"不会。在现代浏览器中，闭包和类的原始性能只有在极端场景下才会有明显的差别"}],"id":"c79ce255c680","title":"Hook&nbsp;会因为在渲染时创建函数而变慢吗？","icons":[{"color":"rgb(255, 159, 26)","name":"priority","index":"1","text":"&#xe625"}]}],"style":{"background-color":"#E1BEE7","border-radius":"5px","color":"#212121","font-weight":"bold","font-size":13},"id":"3b7f7da9d693","title":"二"},{"parent":"root","lineStyle":{"randomLineColor":"rgb(153,204,255)","lineColor":"#F57F17"},"children":[{"parent":"b653f7534587","children":[{"parent":"06a83c1e3750","children":[],"id":"b766b6e2a100","title":"在某些罕见场景中，你可能会需要用&nbsp;useCallback&nbsp;记住一个回调，<br>但由于内部函数必须经常重新创建，记忆效果不是很好。<br>如果你想要记住的函数是一个事件处理器并且在渲染期间没有被用到，<br>你可以&nbsp;把&nbsp;ref&nbsp;当做实例变量&nbsp;来用，并手动把最后提交的值保存在它当中"}],"id":"06a83c1e3750","title":"如何从&nbsp;useCallback&nbsp;读取一个经常变化的值？","icons":[{"color":"rgb(191, 30, 27)","name":"priority","index":"0","text":"&#xe67a"}]},{"parent":"b653f7534587","children":[{"parent":"fe34edd8c073","children":[],"id":"31926e3fb7df","title":"在大型的组件树中，我们推荐的替代方案是通过&nbsp;context&nbsp;用&nbsp;useReducer&nbsp;往下传一个&nbsp;dispatch&nbsp;函数"}],"id":"fe34edd8c073","title":"如何避免向下传递回调？","icons":[{"color":"rgb(255, 159, 26)","name":"priority","index":"1","text":"&#xe625"}]}],"style":{"background-color":"#C8E6C9","border-radius":"5px","color":"#212121","font-weight":"bold","font-size":13,"border-color":"rgb(255, 255, 255)","border-width":"0px","border-style":"none"},"id":"b653f7534587","title":"三"}],"root":true,"theme":"customise_7fd055efa78b","style":{"background-color":"rgb(255, 83, 92)","border-radius":"6px","color":"rgb(255, 255, 255)","font-weight":"bold","font-size":15,"border-color":"rgb(255, 255, 255)","border-width":"0px","border-style":"none"},"id":"root","title":"性能优化<br>","icons":[{"color":"rgb(255, 255, 255)","name":"","index":"46","text":"&#xe693"}],"structure":"mind_right"}},"meta":{"exportTime":"2022-04-10 23:28:57","member":"60cca488e0b34d55bbf2954f","diagramInfo":{"creator":"60cca488e0b34d55bbf2954f","created":"2022-04-10 23:23:15","modified":"2022-04-10 23:28:42","title":"5.8.3Hooks FAQ之性能优化","category":"mind_free"},"id":"6252f6635653bb0743cde79a","type":"ProcessOn Schema File","version":"1.0"}}