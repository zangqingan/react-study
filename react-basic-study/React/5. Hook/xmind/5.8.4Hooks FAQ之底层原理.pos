{"diagram":{"image":{"x":0,"width":200,"y":0,"pngdata":"iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAYAAACtWK6eAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAsUlEQVR4nO3BAQEAAACCIP+vbkhAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8GXHmAAFMgHIEAAAAAElFTkSuQmCC","height":200},"elements":{"leftChildren":[],"note":"","margin":{"childMarginW":10,"childMarginH":5,"marginW":20,"marginH":10},"watermark":"","children":[{"parent":"root","lineStyle":{"randomLineColor":"rgb(255,204,204)","lineColor":"#BBDEFB"},"children":[{"parent":"812b3a9306dd","children":[],"id":"81d4842d0d98","title":"React&nbsp;保持对当先渲染中的组件的追踪。<br>多亏了&nbsp;Hook&nbsp;规范，我们得知&nbsp;Hook&nbsp;只会在&nbsp;React&nbsp;组件中被调用（或自定义&nbsp;Hook&nbsp;——&nbsp;同样只会在&nbsp;React&nbsp;组件中被调用）","icons":[{"color":"rgb(191, 30, 27)","name":"priority","index":"0","text":"&#xe67a"}]},{"parent":"812b3a9306dd","children":[],"id":"0b4b0647241b","title":"每个组件内部都有一个「记忆单元格」列表。它们只不过是我们用来存储一些数据的&nbsp;JavaScript&nbsp;对象。<br>当你用&nbsp;useState()&nbsp;调用一个&nbsp;Hook&nbsp;的时候，它会读取当前的单元格（或在首次渲染时将其初始化），然后把指针移动到下一个。<br>这就是多个&nbsp;useState()&nbsp;调用会得到各自独立的本地&nbsp;state&nbsp;的原因","icons":[{"color":"rgb(255, 159, 26)","name":"priority","index":"1","text":"&#xe625"}]}],"style":{"background-color":"#BBDEFB","border-radius":"5px","color":"#212121","font-weight":"bold","font-size":13,"border-color":"rgb(255, 255, 255)","border-width":"0px","border-style":"none"},"id":"812b3a9306dd","title":"React&nbsp;是如何<br>把对&nbsp;Hook&nbsp;的调用<br>和组件<br>联系起来的？<br>"},{"parent":"root","lineStyle":{"lineColor":"#E1BEE7"},"children":[{"parent":"3b7f7da9d693","children":[],"id":"1c9662c2e71f","title":"react-future&nbsp;这个仓库中包含我们对函数式&nbsp;API&nbsp;的老旧实验。"},{"parent":"3b7f7da9d693","children":[],"id":"8696c786955d","title":"React&nbsp;社区对&nbsp;render&nbsp;prop&nbsp;API&nbsp;的实验，其中包括&nbsp;Ryan&nbsp;Florence&nbsp;的&nbsp;Reactions&nbsp;Component&nbsp;。"},{"parent":"3b7f7da9d693","children":[],"id":"e10c2f9a6da3","title":"Dominic&nbsp;Gannaway&nbsp;的用&nbsp;adopt&nbsp;关键字&nbsp;作为&nbsp;render&nbsp;props&nbsp;的语法糖的提案。"},{"parent":"3b7f7da9d693","children":[],"id":"7aacb3a289d1","title":"DisplayScript&nbsp;中的&nbsp;state&nbsp;变量和&nbsp;state&nbsp;单元格。"},{"parent":"3b7f7da9d693","children":[],"id":"e4e9f6addb80","title":"ReasonReact&nbsp;中的&nbsp;Reducer&nbsp;components。"},{"parent":"3b7f7da9d693","children":[],"id":"11a727f256d5","title":"Rx&nbsp;中的&nbsp;Subscriptions。"},{"parent":"3b7f7da9d693","children":[],"id":"3c0ecffd925e","title":"Multicore&nbsp;OCaml&nbsp;提到的&nbsp;Algebraic&nbsp;effects。"}],"style":{"background-color":"#E1BEE7","border-radius":"5px","color":"#212121","font-weight":"bold","font-size":13},"id":"3b7f7da9d693","title":"Hook&nbsp;使用了<br>哪些现有技术？"}],"root":true,"theme":"customise_7fd055efa78b","style":{"background-color":"rgb(255, 83, 92)","border-radius":"6px","color":"rgb(255, 255, 255)","font-weight":"bold","font-size":15,"border-color":"rgb(255, 255, 255)","border-width":"0px","border-style":"none"},"id":"root","title":"底层原理<br>","icons":[{"color":"rgb(255, 255, 255)","name":"","index":"46","text":"&#xe693"}],"structure":"mind_right"}},"meta":{"exportTime":"2022-04-10 23:31:25","member":"60cca488e0b34d55bbf2954f","diagramInfo":{"creator":"60cca488e0b34d55bbf2954f","created":"2022-04-10 23:23:15","modified":"2022-04-10 23:31:12","title":"5.8.4Hooks FAQ之底层原理","category":"mind_free"},"id":"6252f6635653bb0743cde79a","type":"ProcessOn Schema File","version":"1.0"}}