{"diagram":{"image":{"x":0,"width":200,"y":0,"pngdata":"iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAYAAACtWK6eAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAsUlEQVR4nO3BAQEAAACCIP+vbkhAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8GXHmAAFMgHIEAAAAAElFTkSuQmCC","height":200},"elements":{"leftChildren":[],"note":"","margin":{"childMarginW":10,"childMarginH":5,"marginW":20,"marginH":10},"watermark":"","children":[{"parent":"root","lineStyle":{"lineColor":"#FFCDD2","randomLineColor":"rgb(153,204,255)","lineWidth":"2"},"children":[{"parent":"4a4e937a1166","children":[],"id":"f58c72fb0303","title":"使用&nbsp;Jest，mocha，ava&nbsp;等测试运行器能像编写&nbsp;JavaScript&nbsp;一样编写测试套件，并将其作为开发过程的环节运行。此外，测试套件也将作为持续集成的环节运行"},{"parent":"4a4e937a1166","children":[],"id":"26f6456c6af4","title":"Jest&nbsp;与&nbsp;React&nbsp;项目广泛兼容，支持诸如模拟&nbsp;模块、计时器&nbsp;和&nbsp;jsdom&nbsp;等特性。如果你使用&nbsp;Create&nbsp;React&nbsp;App，Jest&nbsp;已经能够开箱即用且包含许多实用的默认配置","icons":[{"color":"rgb(191, 30, 27)","name":"priority","index":"0","text":"&#xe67a"}]},{"parent":"4a4e937a1166","children":[],"id":"38155145bf86","title":"像&nbsp;mocha&nbsp;这样的库在真实浏览器环境下运行良好，并且可以为明确需要它的测试提供帮助","icons":[{"color":"rgb(255, 159, 26)","name":"priority","index":"1","text":"&#xe625"}]},{"parent":"4a4e937a1166","children":[],"id":"b91414026afa","title":"端对端测试用于测试跨多个页面的长流程，并且需要不同的设置","icons":[{"color":"rgb(48, 191, 191)","name":"priority","index":"2","text":"&#xe62a"}]}],"style":{"padding":"8px 10px 8px 10px","backgroundColor":"#2196F3","color":"#212121","textAlign":"left","font-weight":"bold","font-size":13,"border-color":"rgb(255, 255, 255)","bold":false,"font-style":"normal","italic":false,"border-radius":"5px","background-color":"#FFCDD2","lineStype":{"lineType":"curve","lineColor":"#FFCDD2","randomLineColor":"rgb(153,204,255)","lineWidth":"2"},"box-shadow":"1px 2px 6px #aaa","lineStyle":{"lineColor":"#FFCDD2","randomLineColor":"rgb(153,204,255)","lineWidth":"2"},"font-family":"微软雅黑","border-width":"0px","border-style":"none"},"id":"4a4e937a1166","title":"测试运行器"},{"parent":"root","lineStyle":{"lineColor":"#BBDEFB","randomLineColor":"rgb(255,204,204)","lineWidth":"2"},"children":[{"parent":"a5fa884e620f","children":[],"id":"d3742cff6e16","title":"测试通常在无法访问真实渲染表面（如浏览器）的环境中运行。对于这些环境，我们建议使用&nbsp;jsdom&nbsp;来模拟浏览器，这是一个在&nbsp;Node.js&nbsp;内运行的轻量级浏览器实现","icons":[{"color":"rgb(191, 30, 27)","name":"priority","index":"0","text":"&#xe67a"}]},{"parent":"a5fa884e620f","children":[],"id":"bef60e8cb745","title":"在大多数情况下，jsdom&nbsp;的行为类似于常规浏览器，但不具备如布局和导航的功能。这对于大多数基于&nbsp;Web&nbsp;的组件测试仍然有用，因为它的运行比为每个测试启动浏览器的方式效率更高。并且由于它与你编写的测试运行在同一个进程中，所以你能够编写代码来检查和断言渲染的&nbsp;DOM。<br>就像在真实的浏览器中一样，jsdom&nbsp;让我们模拟用户交互；测试可以在&nbsp;DOM&nbsp;节点上派发事件，然后观察并断言这些操作的副作用","icons":[{"color":"rgb(255, 159, 26)","name":"priority","index":"1","text":"&#xe625"}]},{"parent":"a5fa884e620f","children":[],"id":"15f28685b324","title":"可以使用上述设置编写大部分&nbsp;UI&nbsp;测试：使用&nbsp;Jest&nbsp;作为测试运行器，渲染到&nbsp;jsdom，使用&nbsp;act()&nbsp;辅助函数(例子)提供的能力通过一系列的浏览器事件来模拟用户交互行为。例如，大量&nbsp;React&nbsp;自己的测试都是用这种组合编写的。<br>如果您正在编写一个主要测试浏览器特定行为的库，并且需要布局或真实输入等原生浏览器行为，那么你可以使用像&nbsp;mocha&nbsp;这样的框架。<br>在你&nbsp;无法&nbsp;模拟&nbsp;DOM&nbsp;环境（例如，在&nbsp;Node.js&nbsp;上测试&nbsp;React&nbsp;Native&nbsp;组件）的情况下，可以使用&nbsp;事件模拟辅助函数&nbsp;来模拟与元素的交互。或者，你也可以使用&nbsp;@testing-library/react-native&nbsp;中的&nbsp;fireEvent&nbsp;辅助函数。<br>诸如&nbsp;Cypress，puppeteer&nbsp;和&nbsp;webdriver&nbsp;等框架对于运行端对端测试&nbsp;都非常有用","icons":[{"color":"rgb(48, 191, 191)","name":"priority","index":"2","text":"&#xe62a"}]}],"style":{"padding":"8px 10px 8px 10px","backgroundColor":"#2196F3","color":"#212121","textAlign":"left","font-weight":"bold","font-size":13,"border-color":"rgb(255, 255, 255)","bold":false,"font-style":"normal","italic":false,"border-radius":"5px","background-color":"#BBDEFB","lineStype":{"lineType":"curve","lineColor":"#BBDEFB","randomLineColor":"rgb(255,204,204)","lineWidth":"2"},"box-shadow":"1px 2px 6px #aaa","lineStyle":{"lineColor":"#BBDEFB","randomLineColor":"rgb(255,204,204)","lineWidth":"2"},"font-family":"微软雅黑","border-width":"0px","border-style":"none"},"id":"a5fa884e620f","title":"模拟渲染表面"},{"parent":"root","lineStyle":{"lineColor":"#E1BEE7"},"children":[{"parent":"3b7f7da9d693","children":[],"id":"3d72025d5a72","title":"在编写测试的时候，我们希望模拟代码在测试环境较真实环境中缺失的等效部分（例如，在&nbsp;Node.js&nbsp;中检查&nbsp;navigator.onLine&nbsp;的状态）。测试还可以监视某些功能，并观察测试的其他部分如何与它们进行交互。有选择的将这些功能模拟为测试友好的版本是很有用的。","icons":[{"color":"rgb(191, 30, 27)","name":"priority","index":"0","text":"&#xe67a"}]},{"parent":"3b7f7da9d693","children":[],"id":"c79ce255c680","title":"这对于数据获取尤其有用。通常最好使用“假”数据进行测试，以避免从实际&nbsp;API&nbsp;端获取数据可能导致的缓慢和不稳定","icons":[{"color":"rgb(255, 159, 26)","name":"priority","index":"1","text":"&#xe625"}]}],"style":{"background-color":"#E1BEE7","border-radius":"5px","color":"#212121","font-weight":"bold","font-size":13},"id":"3b7f7da9d693","title":"模拟功能<br>"},{"parent":"root","lineStyle":{"lineColor":"#FFE0B2"},"children":[{"parent":"2c0b8a719934","children":[],"id":"0d17e125fc4e","title":"一些组件可能会依赖在测试环境中无法正常运行的模块，或者说这些模块对于我们的测试并不必要。那么，通过选择性地模拟来替换这些模块是很有用的<br>","icons":[{"color":"rgb(191, 30, 27)","name":"priority","index":"0","text":"&#xe67a"}]},{"parent":"2c0b8a719934","children":[],"id":"419628db349c","title":"在&nbsp;Node.js&nbsp;中，测试运行器如&nbsp;Jest&nbsp;支持模拟模块。你也可以使用像&nbsp;mock-require&nbsp;这样的类库","icons":[{"color":"rgb(255, 159, 26)","name":"priority","index":"1","text":"&#xe625"}]}],"style":{"background-color":"#FFE0B2","border-radius":"5px","color":"#212121","font-weight":"bold","font-size":13},"id":"2c0b8a719934","title":"模拟模块<br>"},{"parent":"root","lineStyle":{"lineColor":"#BBDEFB","randomLineColor":"rgb(255,204,204)","lineWidth":"2"},"children":[{"parent":"52b22a5aefe0","children":[],"id":"05a835293076","title":"组件可能会使用基于时间的函数如&nbsp;setTimeout、setInterval&nbsp;和&nbsp;Date.now&nbsp;等。在测试环境中，使用可以手动“推进”时间的替代物来模拟这些功能会很有帮助。它会确保你的测试快速运行！依赖于计时器的测试仍将按照顺序解析，但会更快。大部分测试框架，包括&nbsp;Jest、sinon&nbsp;和&nbsp;lolex&nbsp;都允许你在测试中模拟计时器"},{"parent":"52b22a5aefe0","children":[],"id":"7cf1d90f68e9","title":"有些时候可能你不想要模拟计时器。例如，在你测试动画时，或是交互端对时间较为敏感的情况下（如&nbsp;API&nbsp;访问速率限制器）。具有计时器模拟的库允许你在每个测试/套件上启用或禁用这个功能，因此你可以明确地选择这些测试的运行方式"}],"style":{"padding":"8px 10px 8px 10px","backgroundColor":"#2196F3","color":"#212121","textAlign":"left","font-weight":"bold","font-size":13,"border-color":"rgb(255, 255, 255)","bold":false,"font-style":"normal","italic":false,"border-radius":"5px","background-color":"#BBDEFB","lineStype":{"lineColor":"#BBDEFB","randomLineColor":"rgb(255,204,204)","lineWidth":"2"},"box-shadow":"1px 2px 6px #aaa","lineStyle":{"lineColor":"#BBDEFB","randomLineColor":"rgb(255,204,204)","lineWidth":"2"},"font-family":"微软雅黑","border-width":"0px","border-style":"none"},"id":"52b22a5aefe0","title":"模拟计时器"},{"parent":"root","lineStyle":{"lineColor":"#FFCDD2","randomLineColor":"rgb(153,204,255)","lineWidth":"2"},"children":[{"parent":"0b440d6ddeaa","children":[],"id":"4c0ca9d39e33","title":"端对端测试对于测试更长的工作流程非常有用，特别是当它们对于你的业务（例如付款或注册）特别重要时。对于这些测试，你可能会希望测试真实浏览器如何渲染整个应用、从真实的&nbsp;API&nbsp;端获取数据、使用&nbsp;session&nbsp;和&nbsp;cookies&nbsp;以及在不同的链接间导航等功能。你可能还希望不仅在&nbsp;DOM&nbsp;状态上进行断言，而同时也在后端数据上进行校验","icons":[{"color":"rgb(191, 30, 27)","name":"priority","index":"0","text":"&#xe67a"}]},{"parent":"0b440d6ddeaa","children":[],"id":"189318cb2a5f","title":"在这种场景下，你可以使用像&nbsp;Cypress&nbsp;这类框架或者如&nbsp;puppeteer&nbsp;这样的库，这样你就可以在多个路由之间导航切换，并且不仅能够在浏览器中对副作用进行断言也能够在后端这么做","icons":[{"color":"rgb(255, 159, 26)","name":"priority","index":"1","text":"&#xe625"}]}],"style":{"padding":"8px 10px 8px 10px","backgroundColor":"#2196F3","color":"#212121","textAlign":"left","font-weight":"bold","font-size":13,"border-color":"rgb(255, 255, 255)","bold":false,"font-style":"normal","italic":false,"border-radius":"5px","background-color":"#FFCDD2","lineStype":{"lineType":"curve","lineColor":"#FFCDD2","randomLineColor":"rgb(153,204,255)","lineWidth":"2"},"box-shadow":"1px 2px 6px #aaa","lineStyle":{"lineColor":"#FFCDD2","randomLineColor":"rgb(153,204,255)","lineWidth":"2"},"font-family":"微软雅黑","border-width":"0px","border-style":"none"},"id":"0b440d6ddeaa","title":"端对端测试"}],"root":true,"theme":"customise_7fd055efa78b","style":{"background-color":"rgb(255, 83, 92)","border-radius":"6px","color":"rgb(255, 255, 255)","font-weight":"bold","font-size":15,"border-color":"rgb(255, 255, 255)","border-width":"0px","border-style":"none"},"id":"root","title":"测试环境","icons":[{"color":"rgb(255, 255, 255)","name":"","index":"46","text":"&#xe693"}],"structure":"mind_right"}},"meta":{"exportTime":"2022-04-10 23:54:21","member":"60cca488e0b34d55bbf2954f","diagramInfo":{"creator":"60cca488e0b34d55bbf2954f","created":"2022-04-10 23:49:29","modified":"2022-04-10 23:54:14","title":"6.3测试环境","category":"mind_free"},"id":"6252fc8963768946f27b0ed9","type":"ProcessOn Schema File","version":"1.0"}}